	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Sent\\Sent\\.IfxSent_Sent.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.src ..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c'

	
$TC162
	.sdecl	'.zrodata.IfxSent..4.cnt',data,rom
	.sect	'.zrodata.IfxSent..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268205504
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_deInitModule',code,cluster('IfxSent_Sent_deInitModule')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_deInitModule'
	.align	2
	
	.global	IfxSent_Sent_deInitModule

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     2   * \file IfxSent_Sent.c
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     3   * \brief SENT SENT details
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     4   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     7   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     8   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	     9   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    11   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    16   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    18   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    25   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    32   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    40   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    41   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    42   *
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    43   */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    44  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    47  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    48  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    49  #include "IfxSent_Sent.h"
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    50  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    52  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    54  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    55  void IfxSent_Sent_deInitModule(IfxSent_Sent *driver)
; Function IfxSent_Sent_deInitModule
.L24:
IfxSent_Sent_deInitModule:	.type	func

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    56  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    57      Ifx_SENT *sentSFR = driver->sent;
	ld.a	a15,[a4]
.L268:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    58      uint16    passwd  = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L267:
	mov	d15,d2
.L270:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    59      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L269:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    60      IfxSent_resetModule(sentSFR);
	mov.aa	a4,a15
.L271:
	call	IfxSent_resetModule
.L272:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    61      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
.L273:
	j	IfxScuWdt_setCpuEndinit
.L83:
	
__IfxSent_Sent_deInitModule_function_end:
	.size	IfxSent_Sent_deInitModule,__IfxSent_Sent_deInitModule_function_end-IfxSent_Sent_deInitModule
.L47:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_initChannel',code,cluster('IfxSent_Sent_initChannel')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_initChannel'
	.align	2
	
	.global	IfxSent_Sent_initChannel

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    62  }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    63  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    64  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    65  boolean IfxSent_Sent_initChannel(IfxSent_Sent_Channel *channel, const IfxSent_Sent_ChannelConfig *config)
; Function IfxSent_Sent_initChannel
.L26:
IfxSent_Sent_initChannel:	.type	func
	mov.aa	a12,a5
.L275:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    66  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    67      boolean      result = TRUE;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    68  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    69      channel->driver = config->driver;
	ld.a	a2,[a12]
.L348:
	st.a	[a4],a2
.L122:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    70      Ifx_SENT    *sentSFR = config->driver->sent;
	ld.a	a2,[a12]
.L349:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    71      Ifx_SENT_CH *sentCh  = &sentSFR->CH[config->channelId];
	ld.b	d15,[a12]6
.L350:
	ld.a	a13,[a2]
.L278:
	sha	d15,#6
.L351:
	addsc.a	a2,a13,d15,#0
	lea	a15,[a2]256
.L277:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    72      channel->channel   = sentCh;
	st.a	[a4]4,a15
.L352:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    73      channel->channelId = config->channelId;
	ld.bu	d15,[a12]6
.L353:
	st.b	[a4]8,d15
.L354:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    74  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    75      IfxSent_disableChannel(sentSFR, config->channelId);
	fcall	.cocofun_5
.L127:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
	insert	d15,d15,#0,#0,#1
	st.b	[a2]264,d15
.L128:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    76      IfxSent_initializeChannelUnitTime(sentSFR, config->channelId, config->tUnit);
	mov.aa	a4,a13
.L274:
	ld.b	d4,[a12]6
.L355:
	ld.w	d5,[a12]52
	call	IfxSent_initializeChannelUnitTime
.L134:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    77  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    78      Ifx_SENT_CH_WDT tempWDT;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    79      tempWDT.U     = 0;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    80      tempWDT.B.WDL = config->watchDogTimerLimit;
	mov	d15,#0
	ld.hu	d0,[a12]4
.L279:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    81      sentCh->WDT.U = tempWDT.U;
	insert	d15,d15,d0,#0,#16
	st.w	[a15]52,d15
.L137:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    82  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    83      Ifx_SENT_CH_RCR tempRCR;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    84      tempRCR.U       = 0;
	mov	d15,#0
.L280:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    85      tempRCR.B.IEP   = config->receiveControl.endPulseIgnored;
	ld.bu	d0,[a12]23
.L356:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    86      tempRCR.B.ACE   = config->receiveControl.alternateCrcSelected;
	insert	d15,d15,d0,#1,#1
	ld.bu	d0,[a12]18
.L357:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    87      tempRCR.B.SNI   = config->receiveControl.statusNibbleEnabled;
	insert	d15,d15,d0,#2,#1
	ld.bu	d0,[a12]21
.L358:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    88      tempRCR.B.SDP   = config->receiveControl.serialDataProcessingEnabled;
	insert	d15,d15,d0,#3,#1
	ld.bu	d0,[a12]19
.L359:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    89      tempRCR.B.SCDIS = config->receiveControl.serialDataDisabledCrcDisabled;
	insert	d15,d15,d0,#4,#1
	ld.bu	d0,[a12]20
.L360:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    90      tempRCR.B.CDIS  = config->receiveControl.crcModeDisabled;
	insert	d15,d15,d0,#5,#1
	ld.bu	d0,[a12]16
.L361:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    91      tempRCR.B.CFC   = config->receiveControl.frameCheckMode;
	insert	d15,d15,d0,#6,#1
	ld.bu	d0,[a12]26
.L362:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    92      tempRCR.B.FRL   = config->receiveControl.frameLength;
	insert	d15,d15,d0,#7,#1
	ld.bu	d0,[a12]25
.L363:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    93      tempRCR.B.CRZ   = config->receiveControl.crcMethodDisabled;
	insert	d15,d15,d0,#8,#8
	ld.bu	d0,[a12]17
.L364:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    94      tempRCR.B.ESF   = config->receiveControl.extendedSerialFrameMode;
	insert	d15,d15,d0,#16,#1
	ld.bu	d0,[a12]27
.L365:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    95      tempRCR.B.IDE   = config->receiveControl.driftErrorsDisabled;
	insert	d15,d15,d0,#17,#1
	ld.bu	d0,[a12]22
.L366:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    96      tempRCR.B.SUSEN = config->receiveControl.suspendTriggered;
	insert	d15,d15,d0,#18,#1
	ld.bu	d0,[a12]24
.L367:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    97      tempRCR.B.FDFL  = config->receiveControl.frequencyDriftCheckEnabled;
	insert	d15,d15,d0,#19,#1
	ld.bu	d0,[a12]28
.L368:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    98      sentCh->RCR.U   = tempRCR.U;
	insert	d15,d15,d0,#20,#1
	st.w	[a15]8,d15
.L276:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	    99  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   100      IfxSent_enableChannel(sentSFR, config->channelId);
	fcall	.cocofun_5
.L141:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
	or	d15,#1
	st.b	[a2]264,d15
.L142:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   101  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   102      Ifx_SENT_CH_VIEW tempVIEW;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   103      tempVIEW.U       = 0;
	mov	d15,#0
.L284:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   104      tempVIEW.B.RDNP0 = config->nibbleControl.nibblePointer0;
	ld.bu	d0,[a12]56
.L369:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   105      tempVIEW.B.RDNP1 = config->nibbleControl.nibblePointer1;
	insert	d15,d15,d0,#0,#3
	ld.bu	d0,[a12]57
.L370:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   106      tempVIEW.B.RDNP2 = config->nibbleControl.nibblePointer2;
	insert	d15,d15,d0,#4,#3
	ld.bu	d0,[a12]58
.L371:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   107      tempVIEW.B.RDNP3 = config->nibbleControl.nibblePointer3;
	insert	d15,d15,d0,#8,#3
	ld.bu	d0,[a12]59
.L372:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   108      tempVIEW.B.RDNP4 = config->nibbleControl.nibblePointer4;
	insert	d15,d15,d0,#12,#3
	ld.bu	d0,[a12]60
.L373:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   109      tempVIEW.B.RDNP5 = config->nibbleControl.nibblePointer5;
	insert	d15,d15,d0,#16,#3
	ld.bu	d0,[a12]61
.L374:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   110      tempVIEW.B.RDNP6 = config->nibbleControl.nibblePointer6;
	insert	d15,d15,d0,#20,#3
	ld.bu	d0,[a12]62
.L375:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   111      tempVIEW.B.RDNP7 = config->nibbleControl.nibblePointer7;
	insert	d15,d15,d0,#24,#3
	ld.bu	d0,[a12]63
.L376:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   112      sentCh->VIEW.U   = tempVIEW.U;
	insert	d15,d15,d0,#28,#3
	st.w	[a15]28,d15
.L150:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   113  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   114      Ifx_SENT_CH_IOCR tempIOCR;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   115      tempIOCR.U       = 0;
	mov	d0,#0
.L286:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   116      tempIOCR.B.DEPTH = config->inputOutputControl.digitalGlitchFilterDepth;
	ld.bu	d15,[a12]14
.L285:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   117      tempIOCR.B.OIE   = config->inputOutputControl.outputPulsePolarityHigh;
	insert	d0,d0,d15,#4,#4
	ld.bu	d15,[a12]9
.L377:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   118      tempIOCR.B.IIE   = config->inputOutputControl.inputPulsePolarityHigh;
	insert	d0,d0,d15,#8,#1
	ld.bu	d15,[a12]8
.L378:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   119      tempIOCR.B.CEC   = config->inputOutputControl.edgeCounterCleared;
	insert	d0,d0,d15,#9,#1
	ld.bu	d15,[a12]10
.L379:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   120      tempIOCR.B.CREG  = config->inputOutputControl.glitchRisingCleared;
	insert	d0,d0,d15,#10,#1
	ld.bu	d15,[a12]12
.L380:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   121      tempIOCR.B.CFEG  = config->inputOutputControl.glitchFallingCleared;
	insert	d0,d0,d15,#14,#1
	ld.bu	d15,[a12]11
.L381:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   122      tempIOCR.B.ETS   = config->inputOutputControl.externalTrigger;
	insert	d0,d0,d15,#15,#1
	ld.bu	d15,[a12]15
.L382:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   123      tempIOCR.B.CTR   = config->inputOutputControl.triggerMonitorCleared;
	insert	d0,d0,d15,#16,#4
	ld.bu	d15,[a12]13
.L383:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   124      sentCh->IOCR.U   = tempIOCR.U;
	insert	d0,d0,d15,#28,#1
	st.w	[a15]20,d0
.L153:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   125  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   126      Ifx_SENT_CH_INP tempINP;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   127      tempINP.U       = 0;
	mov	d15,#0
.L288:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   128      tempINP.B.RSI   = config->interuptNodeControl.receiveSuccessInterruptNode;
	ld.bu	d0,[a12]40
.L287:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   129      tempINP.B.RDI   = config->interuptNodeControl.receiveDataInterruptNode;
	insert	d15,d15,d0,#0,#4
	ld.bu	d0,[a12]41
.L384:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   130      tempINP.B.RBI   = config->interuptNodeControl.receiveBufferOverflowInterruptNode;
	insert	d15,d15,d0,#4,#4
	ld.bu	d0,[a12]42
.L385:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   131      tempINP.B.TDI   = config->interuptNodeControl.transferDataInterruptNode;
	insert	d15,d15,d0,#8,#4
	ld.bu	d0,[a12]43
.L386:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   132      tempINP.B.TBI   = config->interuptNodeControl.transferBufferUnderflowInterruptNode;
	insert	d15,d15,d0,#12,#4
	ld.bu	d0,[a12]44
.L387:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   133      tempINP.B.ERRI  = config->interuptNodeControl.errorInterruptNode;
	insert	d15,d15,d0,#16,#4
	ld.bu	d0,[a12]45
.L388:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   134      tempINP.B.SDI   = config->interuptNodeControl.serialDataReceiveInterruptNode;
	insert	d15,d15,d0,#20,#4
	ld.bu	d0,[a12]46
.L389:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   135      tempINP.B.WDI   = config->interuptNodeControl.watchdogErrorInterruptNode;
	insert	d15,d15,d0,#24,#4
	ld.bu	d0,[a12]47
.L390:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   136      sentCh->INP.U   = tempINP.U;
	insert	d15,d15,d0,#28,#4
	st.w	[a15]48,d15
.L391:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   137  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   138      sentCh->INTEN.U = config->enabledInterrupts.ALL;
	ld.w	d15,[a12]72
.L289:
	st.w	[a15]44,d15
.L392:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   139  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   140      if (config->receiveControl.frameLength > 8)
	ld.bu	d15,[a12]25
.L393:
	jlt.u	d15,#9,.L2
.L394:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   141      {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   142          /* Clear RSI and enable only RDI interrupt */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   143          sentCh->INTEN.B.RSI = 0;
	ld.bu	d15,[a15]44
.L395:
	insert	d15,d15,#0,#0,#1
	st.b	[a15]44,d15
.L396:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   144          sentCh->INTEN.B.RDI = 1;
	ld.bu	d15,[a15]44
.L397:
	or	d15,#2
	st.b	[a15]44,d15
.L2:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   145      }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   146  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   147      if (config->spcModeOn == TRUE)
	ld.bu	d15,[a12]68
.L398:
	jne	d15,#1,.L3
.L156:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   148      {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   149          uint16 timeOut = IFXSENT_CFG_TIMEOUT_VALUE;
	mov.u	d15,#65535
.L290:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   150          uint8  error   = 0;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   151  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   152          /* check if Transaction is in progress, before proceeding !!! */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   153          while ((sentCh->SCR.B.TRQ == 1) && (timeOut > 0))
	mov	d0,#0
	j	.L4
.L5:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   154          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   155              /* Wait for Transaction to be completed */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   156              timeOut--;
	add	d15,#-1
.L4:
	ld.bu	d1,[a15]25
.L399:
	jz.t	d1:7,.L6
.L400:
	jne	d15,#0,.L5
.L6:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   157          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   158  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   159          if (timeOut == 0U)
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   160          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   161              error = 1U;
	cmovn	d0,d15,#1
.L401:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   162          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   163  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   164          if (error == 0U)
	jne	d0,#0,.L8
.L159:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   165          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   166              Ifx_SENT_CH_SCR tempSCR;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   167              tempSCR.U      = 0;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   168              tempSCR.B.PLEN = config->transmitControl.pulseLength;
	mov	d15,#0
	ld.bu	d0,[a12]32
.L291:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   169              tempSCR.B.TRIG = config->transmitControl.triggerSource;
	insert	d15,d15,d0,#0,#6
	ld.bu	d0,[a12]34
.L402:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   170              tempSCR.B.DEL  = config->transmitControl.pulseDelayLength;
	insert	d15,d15,d0,#6,#2
	ld.bu	d0,[a12]33
.L403:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   171              tempSCR.B.BASE = config->transmitControl.timeBase;
	insert	d15,d15,d0,#8,#6
	ld.bu	d0,[a12]35
.L404:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   172              sentCh->SCR.U  = tempSCR.U;
	insert	d15,d15,d0,#14,#1
	st.w	[a15]24,d15
.L405:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   173  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   174              if (config->transmitControl.spcMode == IfxSent_SpcMode_bidirectional)
	ld.bu	d15,[a12]36
.L292:
	jne	d15,#2,.L9
.L406:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   175              {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   176                  /* Enable Buffer Underflow interrupt also */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   177                  sentCh->INTEN.B.TBI = 1U;
	ld.bu	d15,[a15]44
.L407:
	or	d15,#16
	st.b	[a15]44,d15
.L9:
.L8:
.L3:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   178              }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   179          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   180      }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   181  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   182      const IfxSent_Sent_Pins *pinsConfig = (const IfxSent_Sent_Pins *)config->pins;
	ld.a	a13,[a12]48
.L283:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   183  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   184      if (pinsConfig != NULL_PTR)
	jz.a	a13,.L10
.L164:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   185      {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   186          const IfxSent_Sent_In *sentIn = pinsConfig->in;
	ld.a	a15,[a13]
.L282:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   187  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   188          if (sentIn != NULL_PTR)
	jz.a	a15,.L11
.L168:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
	ld.a	a4,[a15]8
.L169:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   189          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   190              IfxSent_initSentPin(sentIn, pinsConfig->inMode, pinsConfig->pinDriver);
	ld.b	d0,[a13]4
.L408:
	ld.bu	d15,[a13]13
.L178:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L12
.L180:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   658      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   659          IfxPort_setPinModeInput(sentIn->pin.port, sentIn->pin.pinIndex, inputMode);
	ld.bu	d4,[a15]12
.L409:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	extr.u	d5,d0,#0,#8
	call	IfxPort_setPinMode
.L181:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   660          IfxPort_setPinPadDriver(sentIn->pin.port, sentIn->pin.pinIndex, padDriver);
	ld.a	a4,[a15]8
.L410:
	ld.bu	d4,[a15]12
.L411:
	mov	d5,d15
	call	IfxPort_setPinPadDriver
.L412:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   661          IfxSent_setAltiInput(sentIn->module, sentIn->channelId, (IfxSent_AlternateInput)sentIn->select);
	ld.a	a2,[a15]
.L413:
	ld.b	d15,[a15]4
.L414:
	ld.bu	d0,[a15]16
.L190:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   662      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   663  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   665  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   666  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   667  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   669      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   670          IfxPort_setPinModeOutput(spcOut->pin.port, spcOut->pin.pinIndex, spcOutMode, spcOut->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   671          IfxPort_setPinPadDriver(spcOut->pin.port, spcOut->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   672      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   676  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   678      Ifx_SENT_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   681      ocs.U = sent->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   688  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   690      sent->CH[channelId].IOCR.B.ALTI = alternateInput;
	sha	d15,#6
.L415:
	addsc.a	a15,a2,d15,#0
.L293:
	ld.bu	d15,[a15]276
.L416:
	insert	d15,d15,d0,#0,#2
	st.b	[a15]276,d15

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)      (inlined)
.L12:
.L11:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   191          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   192  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   193          const IfxSent_Spc_Out *spcOut = pinsConfig->out;
	ld.a	a15,[a13]8
.L294:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   194  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   195          if (spcOut != NULL_PTR)
	jz.a	a15,.L13
.L201:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   658      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   659          IfxPort_setPinModeInput(sentIn->pin.port, sentIn->pin.pinIndex, inputMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   660          IfxPort_setPinPadDriver(sentIn->pin.port, sentIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   661          IfxSent_setAltiInput(sentIn->module, sentIn->channelId, (IfxSent_AlternateInput)sentIn->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   662      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   663  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   665  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   666  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   667  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)
	ld.a	a4,[a15]8
.L202:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   196          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   197              IfxSent_initSpcPin(spcOut, pinsConfig->outMode, pinsConfig->pinDriver);
	ld.bu	d15,[a13]12
.L417:
	ld.bu	d8,[a13]13
.L211:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L14
.L213:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   658      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   659          IfxPort_setPinModeInput(sentIn->pin.port, sentIn->pin.pinIndex, inputMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   660          IfxPort_setPinPadDriver(sentIn->pin.port, sentIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   661          IfxSent_setAltiInput(sentIn->module, sentIn->channelId, (IfxSent_AlternateInput)sentIn->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   662      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   663  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   665  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   666  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   667  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   669      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   670          IfxPort_setPinModeOutput(spcOut->pin.port, spcOut->pin.pinIndex, spcOutMode, spcOut->select);
	ld.bu	d5,[a15]16
.L418:
	ld.bu	d4,[a15]12
.L419:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15
	call	IfxPort_setPinMode
.L214:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   671          IfxPort_setPinPadDriver(spcOut->pin.port, spcOut->pin.pinIndex, padDriver);
	ld.a	a4,[a15]8
.L420:
	ld.bu	d4,[a15]12
.L421:
	mov	d5,d8
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)      (inlined)
.L14:
.L13:
.L10:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   198          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   199      }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   200  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   201      {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   202          IfxSrc_Tos tos = config->interrupt.isrProvider;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   203  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   204          if ((config->interrupt.priority != 0) || (tos == IfxSrc_Tos_dma))
	ld.hu	d15,[a12]64
.L422:
	ld.bu	d0,[a12]66
.L295:
	jne	d15,#0,.L15
.L423:
	jne	d0,#1,.L16
.L15:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   205          {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   206              volatile Ifx_SRC_SRCR *src = IfxSent_getChannelSrc(config->channelId);
	ld.b	d15,[a12]6
.L424:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
	lea	a15,0xf0003100
.L425:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
	sha	d15,#6
	ld.w	d1,.4.cnt
.L426:
	addsc.a	a15,a15,d15,#0
.L427:
	ld.w	d15,[a15]48
.L296:
	mov.a	a15,d1
.L428:
	extr.u	d15,d15,#0,#4
.L297:
	addsc.a	a15,a15,d15,#2
.L227:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   207              IfxSrc_init(src, tos, config->interrupt.priority);
	ld.hu	d15,[a12]64
.L429:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	st.b	[a15],d15
.L430:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L431:
	insert	d15,d15,d0,#3,#3
	st.b	[a15]1,d15
.L242:
	ld.bu	d15,[a15]3
.L432:
	or	d15,#2
	st.b	[a15]3,d15
.L233:
	ld.bu	d15,[a15]1
.L433:
	or	d15,#4
	st.b	[a15]1,d15
.L16:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   208              IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   209          }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   210      }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   211  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   212      return result;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   213  }
	mov	d2,#1
	ret
.L116:
	
__IfxSent_Sent_initChannel_function_end:
	.size	IfxSent_Sent_initChannel,__IfxSent_Sent_initChannel_function_end-IfxSent_Sent_initChannel
.L62:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxSent_Sent..cocofun_5'
	.align	2
; Function .cocofun_5
.L28:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	ld.b	d15,[a12]6
.L281:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
	sha	d15,#6
.L465:
	addsc.a	a2,a13,d15,#0
.L466:
	ld.bu	d15,[a2]264
.L467:
	fret
.L82:
	; End of function
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_initChannelConfig',code,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_initChannelConfig'
	.align	2
	
	.global	IfxSent_Sent_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   214  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   215  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   216  void IfxSent_Sent_initChannelConfig(IfxSent_Sent_ChannelConfig *config, IfxSent_Sent *driver)
; Function IfxSent_Sent_initChannelConfig
.L30:
IfxSent_Sent_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   217  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   218      const IfxSent_Sent_ChannelConfig defaultChannelConfig = {
	movh.a	a15,#@his(.2.ini)
	lea	a15,[a15]@los(.2.ini)
.L438:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   219          .driver             = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   220          .channelId          = IfxSent_ChannelId_none,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   221          .tUnit              = 3E-6,  /* 3 uS */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   222  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   223          .watchDogTimerLimit = 0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   224  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   225          .receiveControl     = {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   226              .endPulseIgnored               = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   227              .alternateCrcSelected          = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   228              .statusNibbleEnabled           = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   229              .serialDataProcessingEnabled   = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   230              .serialDataDisabledCrcDisabled = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   231              .crcModeDisabled               = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   232              .frameCheckMode                = IfxSent_FrameCheckMode_pastSyncPulse,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   233              .frameLength                   = 6,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   234              .crcMethodDisabled             = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   235              .extendedSerialFrameMode       = IfxSent_ExtendedSerialFrameMode_standard,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   236              .driftErrorsDisabled           = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   237              .suspendTriggered              = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   238              .frequencyDriftCheckEnabled    = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   239          },
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   240  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   241          .nibbleControl                            = {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   242              .nibblePointer0 = IfxSent_Nibble_0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   243              .nibblePointer1 = IfxSent_Nibble_1,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   244              .nibblePointer2 = IfxSent_Nibble_2,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   245              .nibblePointer3 = IfxSent_Nibble_3,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   246              .nibblePointer4 = IfxSent_Nibble_4,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   247              .nibblePointer5 = IfxSent_Nibble_5,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   248              .nibblePointer6 = IfxSent_Nibble_6,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   249              .nibblePointer7 = IfxSent_Nibble_7,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   250          },
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   251  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   252          .inputOutputControl                       = {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   253              .digitalGlitchFilterDepth = IfxSent_DigitalGlitchesLength_2,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   254              .outputPulsePolarityHigh  = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   255              .inputPulsePolarityHigh   = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   256              .edgeCounterCleared       = TRUE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   257              .glitchRisingCleared      = TRUE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   258              .glitchFallingCleared     = TRUE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   259              .externalTrigger          = IfxSent_ExternalTrigger_0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   260              .triggerMonitorCleared    = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   261          },
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   262  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   263          .enabledInterrupts.ALL = IFXSENT_CFG_CHANNEL_INTEN,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   264          .interuptNodeControl   = {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   265              .receiveDataInterruptNode             = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   266              .receiveSuccessInterruptNode          = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   267              .receiveBufferOverflowInterruptNode   = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   268              .transferDataInterruptNode            = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   269              .transferBufferUnderflowInterruptNode = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   270              .errorInterruptNode                   = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   271              .serialDataReceiveInterruptNode       = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   272              .watchdogErrorInterruptNode           = IfxSent_InterruptNodePointer_trigo0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   273          },
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   274  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   275          .pins                                     = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   276  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   277          /* SPC mode enable/disable   */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   278          .spcModeOn                                = FALSE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   279      };
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   280      *config        = defaultChannelConfig;
	mov.aa	a2,a4
.L298:
	lea	a6,21
.L18:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a6,.L18
.L299:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   281      config->driver = driver;
	st.a	[a4],a5
.L300:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   282  }
	ret
.L250:
	
__IfxSent_Sent_initChannelConfig_function_end:
	.size	IfxSent_Sent_initChannelConfig,__IfxSent_Sent_initChannelConfig_function_end-IfxSent_Sent_initChannelConfig
.L67:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_initModule',code,cluster('IfxSent_Sent_initModule')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_initModule'
	.align	2
	
	.global	IfxSent_Sent_initModule

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   283  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   284  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   285  boolean IfxSent_Sent_initModule(IfxSent_Sent *driver, const IfxSent_Sent_Config *config)
; Function IfxSent_Sent_initModule
.L32:
IfxSent_Sent_initModule:	.type	func
	mov.aa	a12,a5
.L302:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   286  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   287      boolean   result  = TRUE;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   288      Ifx_SENT *sentSFR = config->module;
	ld.a	a15,[a12]
.L303:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   289      driver->sent = sentSFR;
	st.a	[a4],a15
.L96:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   290  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   291      uint16    passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L301:
	mov	d8,d2

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   658      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   659          IfxPort_setPinModeInput(sentIn->pin.port, sentIn->pin.pinIndex, inputMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   660          IfxPort_setPinPadDriver(sentIn->pin.port, sentIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   661          IfxSent_setAltiInput(sentIn->module, sentIn->channelId, (IfxSent_AlternateInput)sentIn->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   662      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   663  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   665  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   666  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   667  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   669      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   670          IfxPort_setPinModeOutput(spcOut->pin.port, spcOut->pin.pinIndex, spcOutMode, spcOut->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   671          IfxPort_setPinPadDriver(spcOut->pin.port, spcOut->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   672      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   676  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   678      Ifx_SENT_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   681      ocs.U = sent->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   688  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   690      sent->CH[channelId].IOCR.B.ALTI = alternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   691  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   692  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   694  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   695  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   696      sent->CH[channelId].CFDR.B.DIV = divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   697  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   700  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   701  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   702      sent->CH[channelId].CPDR.B.PDIV = preDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   703  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   704  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   705  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   706  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   707  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   708      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   709      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   710      sent->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   711      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   712  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   714  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   715  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   716  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   717      Ifx_SENT_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   719      // remove protection and configure the suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   720      ocs.B.SUS_P = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   721      ocs.B.SUS   = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   722      sent->OCS.U = ocs.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   723  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   726  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   727  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   728      sent->TPD.B.TDIV = timeStampPreDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   729  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   730  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   731  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   732  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   733  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   734      sent->CH[channelId].WDT.B.WDL = watchDogTimerLimit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   735  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   737  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   738  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   739  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   740      return sent->CLC.B.DISS == 0;
	ld.bu	d15,[a15]
.L305:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   292  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   293      if (IfxSent_isModuleEnabled(sentSFR) == FALSE)
	jz.t	d15:1,.L19
.L99:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L304:
	mov	d15,d2
.L307:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L306:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
	ld.bu	d0,[a15]
.L328:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L329:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_setCpuEndinit
.L330:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
	ld.w	d15,[a15]
.L19:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   294      {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   295          IfxSent_enableModule(sentSFR);
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   296      }
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   297  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   298      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L331:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   299      sentSFR->CLC.B.EDIS = (config->sleepModeEnabled != FALSE) ? 0 : 1;
	ld.bu	d15,[a12]4
.L332:
	ld.bu	d0,[a15]
.L333:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   300  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   301      IfxSent_initializeModuleClock(sentSFR, IfxSent_ClockDividerMode_normal, 1023); /* Fractional divider not required, pass 1:1*/
	eq	d15,d15,#0
	mov.aa	a4,a15
.L308:
	insert	d15,d0,d15,#3,#1
	st.b	[a15],d15
.L334:
	mov	d4,#1
.L335:
	mov	d5,#1023
	call	IfxSent_initializeModuleClock
.L309:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   302      IfxSent_setTimeStampPredivider(sentSFR, config->timeStampPreDivider);
	ld.w	d0,[a12]6
.L105:

; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     2   * \file IfxSent.h
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     3   * \brief SENT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     4   * \ingroup IfxLld_Sent
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    10   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    11   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    12   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    14   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    16   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    17   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    19   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    20   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    21   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    22   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    23   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    24   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    25   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    26   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    27   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    28   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    29   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    30   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    31   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    32   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    33   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    40   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    44   * \defgroup IfxLld_Sent_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    45   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    46   * \defgroup IfxLld_Sent_Std_Configuration Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    47   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    48   * \defgroup IfxLld_Sent_Std_Interrupts Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    49   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    50   * \defgroup IfxLld_Sent_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    51   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    52   * \defgroup IfxLld_Sent_Std_Baudrate Baudrate Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    53   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    54   * \defgroup IfxLld_Sent_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    55   * \ingroup IfxLld_Sent_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    56   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    57  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    58  #ifndef IFXSENT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    59  #define IFXSENT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    61  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    62  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    65  #include "_Impl/IfxSent_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    66  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    67  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    68  #include "_PinMap/IfxSent_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    69  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    70  #include "IfxSent_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    71  #include "IfxSent_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    73  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    74  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    75  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    76  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    77  #define IFXSENT_INTERRUPT_STATUS_ERROR_FLAGS (0x000037f4)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    79  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    80  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    81  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    82  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    83  /** \addtogroup IfxLld_Sent_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    84   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    85  /** \brief SENT.CH[channelId].IOCR.ALTI , Specifies alternate input for channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    86   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    87  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    88  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    89      IfxSent_AlternateInput_0 = 0,      /**< \brief Specifies alternate input 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    90      IfxSent_AlternateInput_1,          /**< \brief Specifies alternate input 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    91      IfxSent_AlternateInput_2,          /**< \brief Specifies alternate input 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    92      IfxSent_AlternateInput_3           /**< \brief Specifies alternate input 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    93  } IfxSent_AlternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    94  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    95  /** \brief SENT.CH[channelId].RSR.CST, Specifies the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    96   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    97  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    98  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	    99      IfxSent_ChannelStatus_stop        = 0, /**< \brief Specifies the channel is stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   100      IfxSent_ChannelStatus_initialize  = 1, /**< \brief Specifies the channel is initialized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   101      IfxSent_ChannelStatus_running     = 2, /**< \brief Specifies the channel is running */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   102      IfxSent_ChannelStatus_synchronize = 3  /**< \brief Specifies the channel is synchronized */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   103  } IfxSent_ChannelStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   105  /** \brief SENT.FDR.DM , Specifies clock divider mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   106   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   107  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   108  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   109      IfxSent_ClockDividerMode_off        = 0, /**< \brief Specifies clock divider mode off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   110      IfxSent_ClockDividerMode_normal     = 1, /**< \brief Specifies clock normal divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   111      IfxSent_ClockDividerMode_fractional = 2  /**< \brief Specifies clock fractional divider mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   112  } IfxSent_ClockDividerMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   114  /** \brief SENT.CH[channelId].SDS.CON , Specifies received configuration bit value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   116  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   117  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   118      IfxSent_ConfigBit_0 = 0,      /**< \brief Specifies received configuration bit value 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   119      IfxSent_ConfigBit_1           /**< \brief Specifies received configuration bit value 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   120  } IfxSent_ConfigBit;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   122  /** \brief SENT.CH[channelId].IOCR.DEPTH , Specifies number of port input samples
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   126      IfxSent_DigitalGlitchesLength_off = 0,  /**< \brief Specifies port input samples off */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   127      IfxSent_DigitalGlitchesLength_1   = 1,  /**< \brief Specifies 1 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   128      IfxSent_DigitalGlitchesLength_2,        /**< \brief Specifies 2 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   129      IfxSent_DigitalGlitchesLength_3,        /**< \brief Specifies 3 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   130      IfxSent_DigitalGlitchesLength_4,        /**< \brief Specifies 4 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   131      IfxSent_DigitalGlitchesLength_5,        /**< \brief Specifies 5 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   132      IfxSent_DigitalGlitchesLength_6,        /**< \brief Specifies 6 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   133      IfxSent_DigitalGlitchesLength_7,        /**< \brief Specifies 7 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   134      IfxSent_DigitalGlitchesLength_8,        /**< \brief Specifies 8 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   135      IfxSent_DigitalGlitchesLength_9,        /**< \brief Specifies 9 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   136      IfxSent_DigitalGlitchesLength_10,       /**< \brief Specifies 10 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   137      IfxSent_DigitalGlitchesLength_11,       /**< \brief Specifies 11 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   138      IfxSent_DigitalGlitchesLength_12,       /**< \brief Specifies 12 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   139      IfxSent_DigitalGlitchesLength_13,       /**< \brief Specifies 13 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   140      IfxSent_DigitalGlitchesLength_14,       /**< \brief Specifies 14 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   141      IfxSent_DigitalGlitchesLength_15        /**< \brief Specifies 15 port input samples  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   142  } IfxSent_DigitalGlitchesLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   144  /** \brief SENT.CH[channelId].RCR.ESF , Specifies the serial frame structure
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   145   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   146  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   147  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   148      IfxSent_ExtendedSerialFrameMode_standard = 0,  /**< \brief Specifies the standard serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   149      IfxSent_ExtendedSerialFrameMode_extended = 1   /**< \brief Specifies the extended serial frame structure */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   150  } IfxSent_ExtendedSerialFrameMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   151  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   152  /** \brief SENT.CH[channelId].IOCR.ETS , Specifies the external trigger line
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   154  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   155  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   156      IfxSent_ExternalTrigger_0 = 0,      /**< \brief Specifies the external trigger line 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   157      IfxSent_ExternalTrigger_1,          /**< \brief Specifies the external trigger line 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   158      IfxSent_ExternalTrigger_2,          /**< \brief Specifies the external trigger line 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   159      IfxSent_ExternalTrigger_3,          /**< \brief Specifies the external trigger line 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   160      IfxSent_ExternalTrigger_4,          /**< \brief Specifies the external trigger line 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   161      IfxSent_ExternalTrigger_5,          /**< \brief Specifies the external trigger line 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   162      IfxSent_ExternalTrigger_6,          /**< \brief Specifies the external trigger line 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   163      IfxSent_ExternalTrigger_7,          /**< \brief Specifies the external trigger line 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   164      IfxSent_ExternalTrigger_8,          /**< \brief Specifies the external trigger line 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   165      IfxSent_ExternalTrigger_9,          /**< \brief Specifies the external trigger line 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   166      IfxSent_ExternalTrigger_10,         /**< \brief Specifies the external trigger line 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   167      IfxSent_ExternalTrigger_11,         /**< \brief Specifies the external trigger line 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   168      IfxSent_ExternalTrigger_12,         /**< \brief Specifies the external trigger line 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   169      IfxSent_ExternalTrigger_13,         /**< \brief Specifies the external trigger line 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   170      IfxSent_ExternalTrigger_14,         /**< \brief Specifies the external trigger line 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   171      IfxSent_ExternalTrigger_15          /**< \brief Specifies the external trigger line 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   172  } IfxSent_ExternalTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   174  /** \brief SENT.CH[channelId].RCR.CFC, Specifies received frame check mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   178      IfxSent_FrameCheckMode_pastSyncPulse   = 0, /**< \brief Specifies frame check mode against past sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   179      IfxSent_FrameCheckMode_futureSuncPulse = 1  /**< \brief Specifies frame check mode against future sync pulse */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   180  } IfxSent_FrameCheckMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   182  /** \brief SENT.CH[channelId].INP.X(X= RSI,RDI,RBI,TDI,TBI,ERRI,SDI,WDI),Specifies interrupt requested node for respective interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   183   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   184  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   185  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   186      IfxSent_InterruptNodePointer_trigo0 = 0,      /**< \brief Specifies interrupt requested node TRIGO 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   187      IfxSent_InterruptNodePointer_trigo1,          /**< \brief Specifies interrupt requested node TRIGO 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   188      IfxSent_InterruptNodePointer_trigo2,          /**< \brief Specifies interrupt requested node TRIGO 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   189      IfxSent_InterruptNodePointer_trigo3,          /**< \brief Specifies interrupt requested node TRIGO 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   190      IfxSent_InterruptNodePointer_trigo4,          /**< \brief Specifies interrupt requested node TRIGO 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   191      IfxSent_InterruptNodePointer_trigo5,          /**< \brief Specifies interrupt requested node TRIGO 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   192      IfxSent_InterruptNodePointer_trigo6,          /**< \brief Specifies interrupt requested node TRIGO 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   193      IfxSent_InterruptNodePointer_trigo7,          /**< \brief Specifies interrupt requested node TRIGO 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   194      IfxSent_InterruptNodePointer_trigo8,          /**< \brief Specifies interrupt requested node TRIGO 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   195      IfxSent_InterruptNodePointer_trigo9           /**< \brief Specifies interrupt requested node TRIGO 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   196  } IfxSent_InterruptNodePointer;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   197  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   198  /** \brief SENT.CH[channelId].VIEW.RDNPy( y=0,1,..7 ).Specifies receive data target nibble pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   199   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   200  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   201  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   202      IfxSent_Nibble_0 = 0,      /**< \brief Specifies receive data target nibble pointer to nibble 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   203      IfxSent_Nibble_1,          /**< \brief Specifies receive data target nibble pointer to nibble 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   204      IfxSent_Nibble_2,          /**< \brief Specifies receive data target nibble pointer to nibble 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   205      IfxSent_Nibble_3,          /**< \brief Specifies receive data target nibble pointer to nibble 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   206      IfxSent_Nibble_4,          /**< \brief Specifies receive data target nibble pointer to nibble 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   207      IfxSent_Nibble_5,          /**< \brief Specifies receive data target nibble pointer to nibble 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   208      IfxSent_Nibble_6,          /**< \brief Specifies receive data target nibble pointer to nibble 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   209      IfxSent_Nibble_7           /**< \brief Specifies receive data target nibble pointer to nibble 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   210  } IfxSent_Nibble;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   211  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   212  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   213   * Definition in Ifx_SENT.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   217      IfxSent_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   218      IfxSent_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   219  } IfxSent_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   221  /** \brief Specifies the SENT SPC operational mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   225      IfxSent_SpcMode_sync          = 0, /**< \brief Specifies synchronous SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   226      IfxSent_SpcMode_range         = 1, /**< \brief Specifies range selection SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   227      IfxSent_SpcMode_bidirectional = 2  /**< \brief Specifies bidirectional transmit SPC mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   228  } IfxSent_SpcMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   229  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   230  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   232  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   233  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   234      IfxSent_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   235      IfxSent_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   236      IfxSent_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   237  } IfxSent_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   238  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   239  /** \brief SENT.CH[channelId].SCR.BASE, Specifies selection of pulse based on time
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   240   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   241  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   243      IfxSent_TimeBase_measuredFrequency = 0,  /**< \brief Specifies selection of pulse based on measured frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   244      IfxSent_TimeBase_nominalFrequency  = 1   /**< \brief Specifies selection of pulse based on nomianl frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   245  } IfxSent_TimeBase;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   247  /** \brief SENT.CH[channelId].SCR.TRIG, Specifies trigger source for pulse generation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   248   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   249  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   250  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   251      IfxSent_TriggerSource_off             = 0, /**< \brief Specifies no pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   252      IfxSent_TriggerSource_immediate       = 1, /**< \brief Specifies immediate pulse generation */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   253      IfxSent_TriggerSource_fallingEdge     = 2, /**< \brief Specifies pulse generation at fallingEdge */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   254      IfxSent_TriggerSource_externalTrigger = 3  /**< \brief Specifies pulse generation after each external trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   255  } IfxSent_TriggerSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   257  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   259  /** \brief Sent Interrupt Source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   263      IfxSent_InterruptSource_rsi  = 0,   /**< \brief Enable Interrupt Request RSI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   264      IfxSent_InterruptSource_rdi  = 1,   /**< \brief Enable Interrupt Request RDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   265      IfxSent_InterruptSource_rbi  = 2,   /**< \brief Enable Interrupt Request RBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   266      IfxSent_InterruptSource_tdi  = 3,   /**< \brief Enable Interrupt Request TDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   267      IfxSent_InterruptSource_tbi  = 4,   /**< \brief Enable Interrupt Request TBI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   268      IfxSent_InterruptSource_fri  = 5,   /**< \brief Enable Interrupt Request FRI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   269      IfxSent_InterruptSource_fdi  = 6,   /**< \brief Enable Interrupt Request FDI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   270      IfxSent_InterruptSource_nni  = 7,   /**< \brief Enable Interrupt Request NNI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   271      IfxSent_InterruptSource_nvi  = 8,   /**< \brief Enable Interrupt Request NVI */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   272      IfxSent_InterruptSource_crci = 9,   /**< \brief Enable Interrupt Request crci */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   273      IfxSent_InterruptSource_wsi  = 10,  /**< \brief Enable Interrupt Request wsi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   274      IfxSent_InterruptSource_sdi  = 11,  /**< \brief Enable Interrupt Request sdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   275      IfxSent_InterruptSource_scri = 12,  /**< \brief Enable Interrupt Request scri */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   276      IfxSent_InterruptSource_wdi  = 13   /**< \brief Enable Interrupt Request wdi */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   277  } IfxSent_InterruptSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   278  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   279  /** \addtogroup IfxLld_Sent_Std_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   280   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   282  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   283  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   284  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   286  /** \brief Sets the operation mode of SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   287   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   288   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   289   * \param alternateInput alternate input/output pin for SENT operation
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   292  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   294  /** \brief Set the module time stamp pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   295   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   296   * \param timeStampPreDivider time stamp pre-divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   299  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   301  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   303  /** \addtogroup IfxLld_Sent_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   304   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   305  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   306  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   307  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   308  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   310  /** \brief Copies the current interrupt flags into the Ifx_SENT_CH_INTSTAT structure, and clears the flags in hardware.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   312   * This function should be used in an ISR to retrieve the events which triggered the interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   313   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   314   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   315   * \return Interrupt flags which have been cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   317  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   319  /** \brief Gets the current channel status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   320   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   321   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   322   * \return current channel interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   323   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   324  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   325  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   326  /** \brief gets the source for channel interrupt handler
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   327   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   328   * \return interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   329   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   330  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   331  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   332  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   333  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   334  /** \addtogroup IfxLld_Sent_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   335   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   337  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   338  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   339  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   340  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   341  /** \brief Disable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   342   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   343   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   344   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   345   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   346  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   347  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   348  /** \brief Disable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   349   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   350   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   351   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   352  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   354  /** \brief Enable the channel with the channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   355   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   356   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   358   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   359  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   361  /** \brief Enable the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   362   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   363   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   365  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   367  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   368   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   369   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   370   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   371   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   372   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   373  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   375  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   376   * \param sent pointer to SENT registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   377   * \param mode mode selection (enable / disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   378   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   379   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   380  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   382  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   383   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   384   * \param sent Pointer to SENT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   385   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   386   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   387   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   388  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   389  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   390  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   391  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   392  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   393  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   394  /** \brief Resets the SENT module
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   395   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   396   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   397   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   398  IFX_EXTERN void IfxSent_resetModule(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   399  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   400  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   402  /** \addtogroup IfxLld_Sent_Std_Baudrate
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   403   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   404  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   405  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   406  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   407  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   408  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   409  /** \brief Sets the channel fractional baudrate divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   410   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   411   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   412   * \param divider channel baudrate fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   413   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   414   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   415  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   416  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   417  /** \brief Sets the channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   418   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   419   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   420   * \param preDivider channel baudrate pre-divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   421   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   423  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   426  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   427  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   428  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   429  /** \brief Returns the current module frequency in Hertz.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   430   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   431   * \return The current module frequency in Hertz
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   433  IFX_EXTERN float32 IfxSent_getModuleClock(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   435  /** \brief Initializes the desired unit time (f_tick) for the external SENT device connected to the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   436   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   437   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   438   * \param tUnit desired unit time (f_tick), e.g. 3E-6 for 3 uS
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   439   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   441  IFX_EXTERN void IfxSent_initializeChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId, float32 tUnit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   443  /** \brief Initialize and get the clock for SENT kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   444   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   445   * \param dividerMode Divider mode for clock output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   446   * \param stepValue clock frequency for for module fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   447   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   448   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   449  IFX_EXTERN void IfxSent_initializeModuleClock(Ifx_SENT *sent, IfxSent_ClockDividerMode dividerMode, uint16 stepValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   450  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   451  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   452  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   453  /** \addtogroup IfxLld_Sent_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   454   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   456  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   457  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   458  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   459  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   460  /** \brief Initializes a SENT input
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   461   * \param sentIn the SENT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   462   * \param inputMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   463   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   464   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   466  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   468  /** \brief Initializes a SPC output
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   469   * \param spcOut the SPC Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   470   * \param spcOutMode Port Output Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   471   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   472   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   473   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   474  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   475  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   476  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   478  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   479  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   480  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   482  /** \brief Returns the Frame length with pause pulse
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   483   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   484   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   485   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   486  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   488  /** \brief Set the watch dog timer limit value for sent channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   489   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   490   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   491   * \param watchDogTimerLimit Specifies the watch dog timer limit value.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   492   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   494  IFX_INLINE void IfxSent_setWatchDogTimerLimit(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 watchDogTimerLimit);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   496  /** \brief Return TRUE if SENT module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   497   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   498   * \return The status of whether clock for sent is enabled or disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   499   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   500  IFX_INLINE boolean IfxSent_isModuleEnabled(Ifx_SENT *sent);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   502  /** \brief Return the Interrupt Status of the SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   503   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   504   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   505   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   506   * \return The Interrupt Status of SENT channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   507   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   508  IFX_INLINE boolean IfxSent_getInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   509  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   510  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   511   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   512   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   513   * \param source enable the interrupt source of any interrupt of SENT Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   514   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   516  IFX_INLINE void IfxSent_clearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_InterruptSource source);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   518  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   519   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   520   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   521   * \return The Data content of a recieved Data Frame
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   523  IFX_INLINE uint32 IfxSent_readReceivedData(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   525  /** \brief Reads and returns value in RSR (Received Status Register).
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   526   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   527   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   528   * \return Returns 32 bit RSR
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   530  IFX_INLINE uint32 IfxSent_readReceivedStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   532  /** \brief Returns 4 bit CRC value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   533   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   534   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   535   * \return 4 bit CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   537  IFX_INLINE uint8 IfxSent_readReceivedCrc(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   539  /** \brief Returns 2 bit CST value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   540   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   541   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   542   * \return 2 bit CST
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   543   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   544  IFX_INLINE uint8 IfxSent_readReceivedChannelStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   545  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   546  /** \brief Returns 4 bit SCN value in Receive Status Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   547   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   548   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   549   * \return 4 bit SCN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   550   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   551  IFX_INLINE uint8 IfxSent_readReceivedStatusAndCommunicationNibble(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   552  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   553  /** \brief Returns 32 bit Received Time Stamp Value
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   554   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   555   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   556   * \return 32 bit Time Stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   557   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   558  IFX_INLINE uint32 IfxSent_readReceivedTimeStamp(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   559  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   560  /** \brief Returns 6 bit PLEN value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   561   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   562   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   563   * \return 6 bit PLEN
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   564   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   565  IFX_INLINE uint8 IfxSent_readSpcPulseLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   567  /** \brief Returns 6 bit Delay length value in SCR Register
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   568   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   569   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   570   * \return 6 bit DEL
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   571   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   572  IFX_INLINE uint8 IfxSent_readSpcDelayLength(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   573  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   575  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   576  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   577  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   578  /** \brief Returns the current unit time (f_tick) of the given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   579   * \param sent base address of the SENT register space
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   580   * \param channelId SENT channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   581   * \return The current unit time in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   582   */
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   583  IFX_EXTERN float32 IfxSent_getChannelUnitTime(Ifx_SENT *sent, IfxSent_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   584  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   585  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   586  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   587  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   589  IFX_INLINE void IfxSent_disableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   591      sent->CH[channelId].RCR.B.CEN = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   592  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   595  IFX_INLINE void IfxSent_disableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   596  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   597      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   598      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   599      sent->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   600      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   604  IFX_INLINE void IfxSent_enableChannel(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   606      sent->CH[channelId].RCR.B.CEN = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   610  IFX_INLINE void IfxSent_enableModule(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   612      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   613      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   614      sent->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   615      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   617      if (sent->CLC.U)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   618      {}
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   622  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getAndClearInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   624      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   625      interruptFlags.U             = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   626      sent->CH[channelId].INTCLR.U = interruptFlags.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   627      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   628  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   629  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   630  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   631  IFX_INLINE Ifx_SENT_CH_INTSTAT IfxSent_getChannelInterruptStatus(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   633      Ifx_SENT_CH_INTSTAT interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   634      interruptFlags.U = sent->CH[channelId].INTSTAT.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   635      return interruptFlags;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   636  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   639  IFX_INLINE volatile Ifx_SRC_SRCR *IfxSent_getChannelSrc(IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   641      Ifx_SENT_CH_INP tempINP;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   642      tempINP.U = MODULE_SENT.CH[channelId].INP.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   643      return &MODULE_SRC.SENT.SENT[tempINP.B.RSI].SR;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   647  IFX_INLINE uint16 IfxSent_getFrameLengthWithPausePulse(Ifx_SENT *sent, IfxSent_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   649      uint16 frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   650      frameLength = sent->CH[channelId].RSR.B.FRLEN;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   651      return frameLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   652  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   653  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   655  IFX_INLINE void IfxSent_initSentPin(const IfxSent_Sent_In *sentIn, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   656  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   657      if (sentIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   658      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   659          IfxPort_setPinModeInput(sentIn->pin.port, sentIn->pin.pinIndex, inputMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   660          IfxPort_setPinPadDriver(sentIn->pin.port, sentIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   661          IfxSent_setAltiInput(sentIn->module, sentIn->channelId, (IfxSent_AlternateInput)sentIn->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   662      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   663  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   664  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   665  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   666  IFX_INLINE void IfxSent_initSpcPin(const IfxSent_Spc_Out *spcOut, IfxPort_OutputMode spcOutMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   667  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   668      if (spcOut->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   669      {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   670          IfxPort_setPinModeOutput(spcOut->pin.port, spcOut->pin.pinIndex, spcOutMode, spcOut->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   671          IfxPort_setPinPadDriver(spcOut->pin.port, spcOut->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   672      }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   676  IFX_INLINE boolean IfxSent_isModuleSuspended(Ifx_SENT *sent)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   678      Ifx_SENT_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   681      ocs.U = sent->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   688  IFX_INLINE void IfxSent_setAltiInput(Ifx_SENT *sent, IfxSent_ChannelId channelId, IfxSent_AlternateInput alternateInput)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   690      sent->CH[channelId].IOCR.B.ALTI = alternateInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   691  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   692  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   694  IFX_INLINE void IfxSent_setChannelFractionalDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   695  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   696      sent->CH[channelId].CFDR.B.DIV = divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   697  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   700  IFX_INLINE void IfxSent_setChannelPreDivider(Ifx_SENT *sent, IfxSent_ChannelId channelId, uint16 preDivider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   701  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   702      sent->CH[channelId].CPDR.B.PDIV = preDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   703  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   704  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   705  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   706  IFX_INLINE void IfxSent_setSleepMode(Ifx_SENT *sent, IfxSent_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   707  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   708      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   709      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   710      sent->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   711      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   712  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   714  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   715  IFX_INLINE void IfxSent_setSuspendMode(Ifx_SENT *sent, IfxSent_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   716  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   717      Ifx_SENT_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   719      // remove protection and configure the suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   720      ocs.B.SUS_P = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   721      ocs.B.SUS   = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   722      sent->OCS.U = ocs.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   723  }
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   726  IFX_INLINE void IfxSent_setTimeStampPredivider(Ifx_SENT *sent, uint32 timeStampPreDivider)
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   727  {
; D:\WorkSpace\Tasking\Tasking_TC397_MPU\0_Src\4_McHal\Tricore\Sent\Std\IfxSent.h	   728      sent->TPD.B.TDIV = timeStampPreDivider;
	ld.w	d15,[a15]28
.L336:
	insert	d15,d15,d0,#0,#20
	st.w	[a15]28,d15
.L106:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   303  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   304      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_setCpuEndinit
.L337:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   305  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   306      return result;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   307  }
	mov	d2,#1
	ret
.L91:
	
__IfxSent_Sent_initModule_function_end:
	.size	IfxSent_Sent_initModule,__IfxSent_Sent_initModule_function_end-IfxSent_Sent_initModule
.L52:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_initModuleConfig',code,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_initModuleConfig'
	.align	2
	
	.global	IfxSent_Sent_initModuleConfig

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   308  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   309  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   310  void IfxSent_Sent_initModuleConfig(IfxSent_Sent_Config *config, Ifx_SENT *sent)
; Function IfxSent_Sent_initModuleConfig
.L34:
IfxSent_Sent_initModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   311  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   312      /* Default module initialization    */
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   313      const IfxSent_Sent_Config defaultModuleConfig = {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   314          .module              = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   315          .sleepModeEnabled    = TRUE,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   316          .timeStampPreDivider = 0,
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   317      };
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   318      *config        = defaultModuleConfig;
	mov	d15,#1
	st.b	[a4]4,d15
.L342:
	mov	d15,#0
	st.w	[a4]6,d15
.L343:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   319      config->module = sent;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   320  }
	st.a	[a4],a5
	ret
.L112:
	
__IfxSent_Sent_initModuleConfig_function_end:
	.size	IfxSent_Sent_initModuleConfig,__IfxSent_Sent_initModuleConfig_function_end-IfxSent_Sent_initModuleConfig
.L57:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_readChannelSerialDataFrame',code,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_readChannelSerialDataFrame'
	.align	2
	
	.global	IfxSent_Sent_readChannelSerialDataFrame

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   321  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   322  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   323  boolean IfxSent_Sent_readChannelSerialDataFrame(IfxSent_Sent_Channel *channel, IfxSent_Sent_Frame *frame)
; Function IfxSent_Sent_readChannelSerialDataFrame
.L36:
IfxSent_Sent_readChannelSerialDataFrame:	.type	func

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   324  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   325      boolean           result  = TRUE;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   326  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   327      Ifx_SENT         *sentSFR = channel->driver->sent;
	ld.a	a15,[a4]
.L443:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   328      IfxSent_ChannelId ChanIdx = channel->channelId;
	ld.b	d15,[a4]8
.L310:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   329      frame->data         = sentSFR->RDR[ChanIdx].U;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   330      frame->timeStamp    = sentSFR->RTS[ChanIdx].U;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   331      frame->statusNibble = channel->channel->RSR.B.SCN;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   332  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   333      return result;
	mov	d2,#1
.L444:
	ld.a	a15,[a15]
.L312:
	addsc.a	a15,a15,d15,#2
.L313:
	ld.w	d15,[a15]128
.L311:
	st.w	[a5],d15
.L445:
	ld.w	d15,[a15]2688
.L446:
	st.w	[a5]4,d15
.L447:
	ld.a	a15,[a4]4
.L448:
	ld.bu	d15,[a15]13
.L449:
	and	d15,#15
	st.b	[a5]8,d15
.L450:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   334  }
	ret
.L254:
	
__IfxSent_Sent_readChannelSerialDataFrame_function_end:
	.size	IfxSent_Sent_readChannelSerialDataFrame,__IfxSent_Sent_readChannelSerialDataFrame_function_end-IfxSent_Sent_readChannelSerialDataFrame
.L72:
	; End of function
	
	.sdecl	'.text.IfxSent_Sent.IfxSent_Sent_readChannelSerialMessageFrame',code,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.text.IfxSent_Sent.IfxSent_Sent_readChannelSerialMessageFrame'
	.align	2
	
	.global	IfxSent_Sent_readChannelSerialMessageFrame

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   335  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   336  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   337  boolean IfxSent_Sent_readChannelSerialMessageFrame(IfxSent_Sent_Channel *channel, IfxSent_Sent_SerialMessageFrame *message)
; Function IfxSent_Sent_readChannelSerialMessageFrame
.L38:
IfxSent_Sent_readChannelSerialMessageFrame:	.type	func

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   338  {
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   339      boolean         result = TRUE;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   340  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   341      Ifx_SENT_CH    *sentCh = channel->channel;
	ld.a	a15,[a4]4
.L455:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   342      Ifx_SENT_CH_SDS sds;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   343  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   344      sds.U               = sentCh->SDS.U;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   345  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   346      message->serialData = sds.B.SD;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   347      message->messageId  = sds.B.MID;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   348      message->configBit  = (IfxSent_ConfigBit)sds.B.CON;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   349      message->crc        = sds.B.SCRC;
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   350  
; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   351      return result;
	mov	d2,#1
.L456:
	ld.w	d15,[a15]16
.L314:
	st.h	[a5]2,d15
.L457:
	extr.u	d0,d15,#16,#8
	st.b	[a5]1,d0
.L458:
	extr.u	d15,d15,#24,#8
.L315:
	extr.u	d0,d15,#7,#1
	st.b	[a5]4,d0
.L459:
	and	d15,#63
	st.b	[a5],d15
.L460:

; ..\0_Src\4_McHal\Tricore\Sent\Sent\IfxSent_Sent.c	   352  }
	ret
.L261:
	
__IfxSent_Sent_readChannelSerialMessageFrame_function_end:
	.size	IfxSent_Sent_readChannelSerialMessageFrame,__IfxSent_Sent_readChannelSerialMessageFrame_function_end-IfxSent_Sent_readChannelSerialMessageFrame
.L77:
	; End of function
	
	.sdecl	'.rodata.IfxSent_Sent..2.ini',data,rom
	.sect	'.rodata.IfxSent_Sent..2.ini'
	.align	4
.2.ini:	.type	object
	.size	.2.ini,88
	.space	6
	.byte	-1
	.space	3
	.byte	1,1,1
	.space	1
	.byte	2
	.space	10
	.byte	6
	.space	26
	.word	910775196
	.space	1
	.byte	1,2,3,4
	.byte	5,6,7
	.space	8
	.word	8173
	.space	12
	.calls	'IfxSent_Sent_deInitModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxSent_Sent_deInitModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxSent_Sent_deInitModule','IfxSent_resetModule'
	.calls	'IfxSent_Sent_deInitModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxSent_Sent_initChannel','IfxSent_initializeChannelUnitTime'
	.calls	'IfxSent_Sent_initChannel','IfxPort_setPinMode'
	.calls	'IfxSent_Sent_initChannel','IfxPort_setPinPadDriver'
	.calls	'IfxSent_Sent_initModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxSent_Sent_initModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxSent_Sent_initModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxSent_Sent_initModule','IfxSent_initializeModuleClock'
	.calls	'IfxSent_Sent_initChannel','.cocofun_5'
	.calls	'IfxSent_Sent_deInitModule','',0
	.calls	'IfxSent_Sent_initChannel','',0
	.calls	'.cocofun_5','',0
	.calls	'IfxSent_Sent_initChannelConfig','',0
	.calls	'IfxSent_Sent_initModule','',0
	.calls	'IfxSent_Sent_initModuleConfig','',0
	.calls	'IfxSent_Sent_readChannelSerialDataFrame','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxSent_resetModule
	.extern	IfxSent_initializeChannelUnitTime
	.extern	IfxSent_initializeModuleClock
	.calls	'IfxSent_Sent_readChannelSerialMessageFrame','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L40:
	.word	114900
	.half	3
	.word	.L41
	.byte	4
.L39:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L42
	.byte	2,1,1,3
	.word	157
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	160
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	205
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	217
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	329
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	303
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	335
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	335
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	303
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	460
	.byte	4,2,35,0,0
.L90:
	.byte	7
	.byte	'unsigned char',0,1,8
.L88:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	635
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	901
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	556
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	861
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1092
	.byte	4,2,35,8,0,14
	.word	1132
	.byte	3
	.word	1195
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1200
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	613
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	613
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1200
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	613
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	613
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	613
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1200
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	613
	.byte	1,1,6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,6,68,16,4,11
	.byte	'SRPN',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	596
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,6,93,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1610
	.byte	4,2,35,0,0,14
	.word	1900
	.byte	3
	.word	1939
.L241:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,5,247,1,17,1,1
.L243:
	.byte	5
	.byte	'src',0,5,247,1,60
	.word	1944
.L245:
	.byte	6,0
.L246:
	.byte	4
	.byte	'IfxSrc_enable',0,3,5,137,2,17,1,1
.L247:
	.byte	5
	.byte	'src',0,5,137,2,54
	.word	1944
.L249:
	.byte	6,0
.L224:
	.byte	15,7,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0
.L232:
	.byte	4
	.byte	'IfxSrc_init',0,3,5,143,2,17,1,1
.L234:
	.byte	5
	.byte	'src',0,5,143,2,52
	.word	1944
.L236:
	.byte	5
	.byte	'typOfService',0,5,143,2,68
	.word	2029
.L238:
	.byte	5
	.byte	'priority',0,5,143,2,95
	.word	613
.L240:
	.byte	17,6,0,0,15,9,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	2237
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	596
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	2484
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	613
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	596
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	613
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	2484
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	2484
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,11,145,3,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,171,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2715
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,11,171,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,11,251,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3031
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,11,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,155,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3602
	.byte	4,2,35,0,0,18,4
	.word	596
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,11,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,11,171,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3731
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,11,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,11,187,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3946
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,11,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,11,195,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4161
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,11,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	596
	.byte	5,0,2,35,3,0,12,11,179,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4378
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,11,141,1,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,163,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4598
	.byte	4,2,35,0,0,18,24
	.word	596
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,11,212,3,16,4,11
	.byte	'PD0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	596
	.byte	2,0,2,35,3,0,12,11,195,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4922
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,11,233,3,16,4,11
	.byte	'PD8',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	596
	.byte	2,0,2,35,3,0,12,11,203,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5226
	.byte	4,2,35,0,0,18,8
	.word	596
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,11,111,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,147,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5551
	.byte	4,2,35,0,0,18,12
	.word	596
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,11,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,187,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5891
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,11,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,11,179,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6257
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,11,230,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,12,11,139,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6621
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,11,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,12,11,155,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6768
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,11,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,12,11,163,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6937
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,11,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,147,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7109
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,11,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	12,0,2,35,2,0,12,11,219,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7284
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,11,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	8,0,2,35,3,0,12,11,235,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7458
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,11,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,12,11,243,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7632
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,11,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,11,227,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7808
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,11,208,2,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,131,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7964
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,11,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,11,211,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8297
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,11,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	596
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,11,203,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8645
	.byte	4,2,35,0,0,18,32
	.word	8925
	.byte	19,7,0,18,56
	.word	596
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,12,11,139,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8983
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,11,131,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9070
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,11,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2991
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	3562
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3682
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3722
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3906
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	4121
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	4338
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	4558
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3722
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4873
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4913
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	5186
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	5502
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	5542
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5842
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5882
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	6217
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	6581
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	5542
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6728
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6897
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	7069
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	7244
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	7418
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	7592
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7768
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7924
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	8257
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	8605
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	5542
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8965
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8974
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	9030
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	9597
	.byte	4,3,35,252,1,0,14
	.word	9637
	.byte	3
	.word	10207
	.byte	15,10,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0
.L179:
	.byte	4
	.byte	'IfxPort_setPinModeInput',0,3,10,157,5,17,1,1
.L182:
	.byte	5
	.byte	'port',0,10,157,5,48
	.word	10212
.L184:
	.byte	5
	.byte	'pinIndex',0,10,157,5,60
	.word	596
.L186:
	.byte	5
	.byte	'mode',0,10,157,5,88
	.word	10217
.L188:
	.byte	6,0,15,10,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,10,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L212:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,10,163,5,17,1,1
.L215:
	.byte	5
	.byte	'port',0,10,163,5,49
	.word	10212
.L217:
	.byte	5
	.byte	'pinIndex',0,10,163,5,61
	.word	596
.L219:
	.byte	5
	.byte	'mode',0,10,163,5,90
	.word	10422
.L221:
	.byte	5
	.byte	'index',0,10,163,5,114
	.word	10518
.L223:
	.byte	6,0,15,10,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,10,169,5,17,1,1,5
	.byte	'port',0,10,169,5,44
	.word	10212
	.byte	5
	.byte	'pinIndex',0,10,169,5,56
	.word	596
	.byte	5
	.byte	'action',0,10,169,5,80
	.word	10831
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,12,157,14,17,1,1,5
	.byte	'timeSec',0,12,157,14,40
	.word	217
	.byte	17,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,12,188,13,20
	.word	217
	.byte	1,1,6,0,10
	.byte	'_Ifx_SENT_CLC_Bits',0,14,192,2,16,4,11
	.byte	'DISR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,12,14,192,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11096
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_ID_Bits',0,14,212,2,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,14,208,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11254
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_FDR_Bits',0,14,202,2,16,4,11
	.byte	'STEP',0,2
	.word	613
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,12,14,200,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11374
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_INTOV_Bits',0,14,220,2,16,4,11
	.byte	'IPC0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IPC1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IPC2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'IPC3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'IPC4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IPC5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'IPC6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'IPC7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'IPC8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'IPC9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'IPC10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'IPC11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'IPC12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'IPC13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'IPC14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'IPC15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'IPC16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'IPC17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IPC18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'IPC19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'IPC20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'IPC21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'IPC22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'IPC23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'IPC24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	596
	.byte	7,0,2,35,3,0,12,14,216,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11534
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_TSR_Bits',0,14,181,3,16,4,11
	.byte	'CTS',0,4
	.word	421
	.byte	32,0,2,35,0,0,12,14,152,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12040
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_TPD_Bits',0,14,174,3,16,4,11
	.byte	'TDIV',0,4
	.word	421
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	12,0,2,35,2,0,12,14,144,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12121
	.byte	4,2,35,0,0,18,96
	.word	596
	.byte	19,95,0,10
	.byte	'_Ifx_SENT_RDR_Bits',0,14,155,3,16,4,11
	.byte	'RD0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'RD1',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'RD2',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'RD3',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'RD4',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'RD5',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'RD6',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'RD7',0,1
	.word	596
	.byte	4,0,2,35,3,0,12,14,128,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12235
	.byte	4,2,35,0,0,18,100
	.word	12381
	.byte	19,24,0,10
	.byte	'_Ifx_SENT_OCS_Bits',0,14,145,3,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,12,14,248,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12430
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_KRSTCLR_Bits',0,14,138,3,16,4,11
	.byte	'CLR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,12,14,240,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12591
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_KRST1_Bits',0,14,131,3,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,12,14,232,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12698
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_KRST0_Bits',0,14,251,2,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,12,14,224,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12803
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_ACCEN1_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,12,14,200,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12927
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_ACCEN0_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,12,14,192,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13017
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_CPDR_Bits',0,14,118,16,4,11
	.byte	'PDIV',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,12,14,216,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13587
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_CFDR_Bits',0,14,111,16,4,11
	.byte	'DIV',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'DIVM',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,14,208,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13695
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_RCR_Bits',0,14,240,1,16,4,11
	.byte	'CEN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IEP',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'ACE',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SNI',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'SDP',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'SCDIS',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'CDIS',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'CFC',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'FRL',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'CRZ',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'ESF',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IDE',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'SUSEN',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'FDFL',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	613
	.byte	11,0,2,35,2,0
.L138:
	.byte	12,14,144,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13795
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_RSR_Bits',0,14,132,2,16,4,11
	.byte	'CRC',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'CST',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'SCN',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'FRLEN',0,2
	.word	613
	.byte	16,0,2,35,2,0,12,14,152,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14103
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_SDS_Bits',0,14,154,2,16,4,11
	.byte	'SD',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'MID',0,1
	.word	596
	.byte	8,0,2,35,2,11
	.byte	'SCRC',0,1
	.word	596
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'CON',0,1
	.word	596
	.byte	1,0,2,35,3,0
.L265:
	.byte	12,14,168,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14279
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_IOCR_Bits',0,14,218,1,16,4,11
	.byte	'ALTI',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'DEPTH',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'OIE',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'IIE',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'CEC',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'REG',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'FEG',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'CREG',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'CFEG',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'ETS',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'EC',0,2
	.word	613
	.byte	8,4,2,35,2,11
	.byte	'CTR',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'TRM',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'RXM',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'TXM',0,1
	.word	596
	.byte	1,0,2,35,3,0
.L151:
	.byte	12,14,136,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14431
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_SCR_Bits',0,14,143,2,16,4,11
	.byte	'PLEN',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'TRIG',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'DEL',0,1
	.word	596
	.byte	6,2,2,35,1,11
	.byte	'BASE',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'TRQ',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0
.L160:
	.byte	12,14,160,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14775
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_VIEW_Bits',0,14,164,2,16,4,11
	.byte	'RDNP0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'RDNP1',0,1
	.word	596
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'RDNP2',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'RDNP3',0,1
	.word	596
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'RDNP4',0,1
	.word	596
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'RDNP5',0,1
	.word	596
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'RDNP6',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'RDNP7',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0
.L148:
	.byte	12,14,176,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14945
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_INTSTAT_Bits',0,14,198,1,16,4,11
	.byte	'RSI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RDI',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RBI',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TDI',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TBI',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FRI',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FDI',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'NNI',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'NVI',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CRCI',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'WSI',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SDI',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SCRI',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'WDI',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	18,0,2,35,0,0,12,14,128,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15333
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_INTSET_Bits',0,14,178,1,16,4,11
	.byte	'RSI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RDI',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RBI',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TDI',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TBI',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FRI',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FDI',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'NNI',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'NVI',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CRCI',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'WSI',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SDI',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SCRI',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'WDI',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	18,0,2,35,0,0,12,14,248,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15641
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_INTCLR_Bits',0,14,138,1,16,4,11
	.byte	'RSI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RDI',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RBI',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TDI',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TBI',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FRI',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FDI',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'NNI',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'NVI',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CRCI',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'WSI',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SDI',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SCRI',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'WDI',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	18,0,2,35,0,0,12,14,232,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15948
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_INTEN_Bits',0,14,158,1,16,4,11
	.byte	'RSI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RDI',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RBI',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TDI',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TBI',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FRI',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FDI',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'NNI',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'NVI',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CRCI',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'WSI',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SDI',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'SCRI',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'WDI',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	18,0,2,35,0,0,12,14,240,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16255
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_INP_Bits',0,14,125,16,4,11
	.byte	'RSI',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'RDI',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'RBI',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'TDI',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'TBI',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'ERRI',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'SDI',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'WDI',0,1
	.word	596
	.byte	4,0,2,35,3,0
.L154:
	.byte	12,14,224,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16561
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH_WDT_Bits',0,14,185,2,16,4,11
	.byte	'WDL',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0
.L135:
	.byte	12,14,184,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16750
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SENT_CH',0,14,169,5,25,64,13
	.byte	'CPDR',0
	.word	13655
	.byte	4,2,35,0,13
	.byte	'CFDR',0
	.word	13755
	.byte	4,2,35,4,13
	.byte	'RCR',0
	.word	14063
	.byte	4,2,35,8,13
	.byte	'RSR',0
	.word	14239
	.byte	4,2,35,12,13
	.byte	'SDS',0
	.word	14391
	.byte	4,2,35,16,13
	.byte	'IOCR',0
	.word	14735
	.byte	4,2,35,20,13
	.byte	'SCR',0
	.word	14905
	.byte	4,2,35,24,13
	.byte	'VIEW',0
	.word	15293
	.byte	4,2,35,28,13
	.byte	'INTSTAT',0
	.word	15601
	.byte	4,2,35,32,13
	.byte	'INTSET',0
	.word	15908
	.byte	4,2,35,36,13
	.byte	'INTCLR',0
	.word	16215
	.byte	4,2,35,40,13
	.byte	'INTEN',0
	.word	16521
	.byte	4,2,35,44,13
	.byte	'INP',0
	.word	16710
	.byte	4,2,35,48,13
	.byte	'WDT',0
	.word	16817
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	5542
	.byte	8,2,35,56,0,18,192,12
	.word	16857
	.byte	19,24,0,14
	.word	17096
	.byte	18,192,6
	.word	596
	.byte	19,191,6,0,10
	.byte	'_Ifx_SENT_RTS_Bits',0,14,168,3,16,4,11
	.byte	'LTS',0,4
	.word	421
	.byte	32,0,2,35,0,0,12,14,136,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17122
	.byte	4,2,35,0,0,18,100
	.word	17163
	.byte	19,24,0,18,28
	.word	596
	.byte	19,27,0,10
	.byte	'_Ifx_SENT',0,14,201,5,25,128,22,13
	.byte	'CLC',0
	.word	11214
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3722
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11334
	.byte	4,2,35,8,13
	.byte	'FDR',0
	.word	11494
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	3722
	.byte	4,2,35,16,13
	.byte	'INTOV',0
	.word	12000
	.byte	4,2,35,20,13
	.byte	'TSR',0
	.word	12081
	.byte	4,2,35,24,13
	.byte	'TPD',0
	.word	12186
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	12226
	.byte	96,2,35,32,13
	.byte	'RDR',0
	.word	12421
	.byte	100,3,35,128,1,13
	.byte	'reserved_E4',0
	.word	3722
	.byte	4,3,35,228,1,13
	.byte	'OCS',0
	.word	12551
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	12658
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	12763
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	12887
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	12977
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	13547
	.byte	4,3,35,252,1,13
	.byte	'CH',0
	.word	17106
	.byte	192,12,3,35,128,2,13
	.byte	'reserved_740',0
	.word	17111
	.byte	192,6,3,35,192,14,13
	.byte	'RTS',0
	.word	17203
	.byte	100,3,35,128,21,13
	.byte	'reserved_AE4',0
	.word	17212
	.byte	28,3,35,228,21,0,14
	.word	17221
.L86:
	.byte	3
	.word	17589
.L259:
	.byte	15,15,85,9,1,16
	.byte	'IfxSent_ChannelId_none',0,127,16
	.byte	'IfxSent_ChannelId_0',0,0,16
	.byte	'IfxSent_ChannelId_1',0,1,16
	.byte	'IfxSent_ChannelId_2',0,2,16
	.byte	'IfxSent_ChannelId_3',0,3,16
	.byte	'IfxSent_ChannelId_4',0,4,16
	.byte	'IfxSent_ChannelId_5',0,5,16
	.byte	'IfxSent_ChannelId_6',0,6,16
	.byte	'IfxSent_ChannelId_7',0,7,16
	.byte	'IfxSent_ChannelId_8',0,8,16
	.byte	'IfxSent_ChannelId_9',0,9,16
	.byte	'IfxSent_ChannelId_10',0,10,16
	.byte	'IfxSent_ChannelId_11',0,11,16
	.byte	'IfxSent_ChannelId_12',0,12,16
	.byte	'IfxSent_ChannelId_13',0,13,16
	.byte	'IfxSent_ChannelId_14',0,14,16
	.byte	'IfxSent_ChannelId_15',0,15,16
	.byte	'IfxSent_ChannelId_16',0,16,16
	.byte	'IfxSent_ChannelId_17',0,17,16
	.byte	'IfxSent_ChannelId_18',0,18,16
	.byte	'IfxSent_ChannelId_19',0,19,16
	.byte	'IfxSent_ChannelId_20',0,20,16
	.byte	'IfxSent_ChannelId_21',0,21,16
	.byte	'IfxSent_ChannelId_22',0,22,16
	.byte	'IfxSent_ChannelId_23',0,23,16
	.byte	'IfxSent_ChannelId_24',0,24,0,15,13,87,9,1,16
	.byte	'IfxSent_AlternateInput_0',0,0,16
	.byte	'IfxSent_AlternateInput_1',0,1,16
	.byte	'IfxSent_AlternateInput_2',0,2,16
	.byte	'IfxSent_AlternateInput_3',0,3,0
.L189:
	.byte	4
	.byte	'IfxSent_setAltiInput',0,3,13,176,5,17,1,1
.L191:
	.byte	5
	.byte	'sent',0,13,176,5,48
	.word	17594
.L193:
	.byte	5
	.byte	'channelId',0,13,176,5,72
	.word	17599
.L195:
	.byte	5
	.byte	'alternateInput',0,13,176,5,106
	.word	18195
.L197:
	.byte	6,0
.L104:
	.byte	4
	.byte	'IfxSent_setTimeStampPredivider',0,3,13,214,5,17,1,1
.L107:
	.byte	5
	.byte	'sent',0,13,214,5,58
	.word	17594
.L109:
	.byte	5
	.byte	'timeStampPreDivider',0,13,214,5,71
	.word	2484
.L111:
	.byte	6,0,8
	.byte	'IfxSent_getAndClearInterruptStatus',0,3,13,238,4,32
	.word	15601
	.byte	1,1,5
	.byte	'sent',0,13,238,4,77
	.word	17594
	.byte	5
	.byte	'channelId',0,13,238,4,101
	.word	17599
	.byte	6,0
.L226:
	.byte	8
	.byte	'IfxSent_getChannelSrc',0,3,13,255,4,35
	.word	1944
	.byte	1,1
.L228:
	.byte	5
	.byte	'channelId',0,13,255,4,75
	.word	17599
.L230:
	.byte	6,0
.L126:
	.byte	4
	.byte	'IfxSent_disableChannel',0,3,13,205,4,17,1,1
.L129:
	.byte	5
	.byte	'sent',0,13,205,4,50
	.word	17594
.L131:
	.byte	5
	.byte	'channelId',0,13,205,4,74
	.word	17599
.L133:
	.byte	6,0
.L140:
	.byte	4
	.byte	'IfxSent_enableChannel',0,3,13,220,4,17,1,1
.L143:
	.byte	5
	.byte	'sent',0,13,220,4,49
	.word	17594
.L145:
	.byte	5
	.byte	'channelId',0,13,220,4,73
	.word	17599
.L147:
	.byte	6,0
.L98:
	.byte	4
	.byte	'IfxSent_enableModule',0,3,13,226,4,17,1,1
.L100:
	.byte	5
	.byte	'sent',0,13,226,4,48
	.word	17594
.L102:
	.byte	6,0,20,10,246,1,9,8,13
	.byte	'port',0
	.word	10212
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	596
	.byte	1,2,35,4,0,15,17,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,20,16,56,15,20,13
	.byte	'module',0
	.word	17594
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	17599
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	18794
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	18833
	.byte	1,2,35,16,0,21
	.word	18951
.L165:
	.byte	3
	.word	19021
	.byte	15,10,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0
.L167:
	.byte	4
	.byte	'IfxSent_initSentPin',0,3,13,143,5,17,1,1
.L170:
	.byte	5
	.byte	'sentIn',0,13,143,5,60
	.word	19026
.L172:
	.byte	5
	.byte	'inputMode',0,13,143,5,86
	.word	10217
.L174:
	.byte	5
	.byte	'padDriver',0,13,143,5,115
	.word	19031
.L176:
	.byte	17,6,6,0,0,20,16,65,15,20,13
	.byte	'module',0
	.word	17594
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	17599
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	18794
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	10518
	.byte	1,2,35,16,0,21
	.word	19541
.L198:
	.byte	3
	.word	19611
.L200:
	.byte	4
	.byte	'IfxSent_initSpcPin',0,3,13,154,5,17,1,1
.L203:
	.byte	5
	.byte	'spcOut',0,13,154,5,59
	.word	19616
.L205:
	.byte	5
	.byte	'spcOutMode',0,13,154,5,86
	.word	10422
.L207:
	.byte	5
	.byte	'padDriver',0,13,154,5,116
	.word	19031
.L209:
	.byte	17,6,0,0,8
	.byte	'IfxSent_isModuleEnabled',0,3,13,226,5,20
	.word	596
	.byte	1,1,5
	.byte	'sent',0,13,226,5,54
	.word	17594
	.byte	6,0,21
	.word	437
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	19759
	.byte	0,14
	.word	421
	.byte	3
	.word	421
	.byte	24
	.byte	'__cmpswapw',0
	.word	19801
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	19806
	.byte	25
	.byte	'value',0
	.word	421
	.byte	25
	.byte	'compare',0
	.word	421
	.byte	0,26
	.word	165
	.byte	27
	.word	191
	.byte	6,0,26
	.word	226
	.byte	27
	.word	258
	.byte	6,0,26
	.word	271
	.byte	6,0,26
	.word	340
	.byte	27
	.word	359
	.byte	6,0,26
	.word	375
	.byte	27
	.word	390
	.byte	27
	.word	404
	.byte	6,0,26
	.word	1205
	.byte	27
	.word	1245
	.byte	27
	.word	1263
	.byte	6,0,26
	.word	1283
	.byte	27
	.word	1326
	.byte	6,0,26
	.word	1346
	.byte	27
	.word	1384
	.byte	27
	.word	1402
	.byte	6,0,26
	.word	1422
	.byte	27
	.word	1463
	.byte	6,0,28
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,237,1,17,1,1,1,1,5
	.byte	'password',0,3,237,1,50
	.word	613
	.byte	0,28
	.byte	'IfxScuWdt_setCpuEndinit',0,3,157,2,17,1,1,1,1,5
	.byte	'password',0,3,157,2,48
	.word	613
	.byte	0,26
	.word	1483
	.byte	27
	.word	1534
	.byte	6,0,26
	.word	1554
	.byte	6,0,29
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	613
	.byte	1,1,1,1,26
	.word	1949
	.byte	27
	.word	1977
	.byte	6,0,26
	.word	1992
	.byte	27
	.word	2014
	.byte	6,0,26
	.word	2160
	.byte	27
	.word	2180
	.byte	27
	.word	2193
	.byte	27
	.word	2215
	.byte	17,30
	.word	1949
	.byte	27
	.word	1977
	.byte	31
	.word	1990
	.byte	0,6,0,0,26
	.word	2408
	.byte	6,0,26
	.word	2442
	.byte	6,0,26
	.word	2505
	.byte	27
	.word	2546
	.byte	6,0,26
	.word	2565
	.byte	27
	.word	2620
	.byte	6,0,26
	.word	2639
	.byte	27
	.word	2679
	.byte	27
	.word	2696
	.byte	17,6,0,0,26
	.word	10342
	.byte	27
	.word	10374
	.byte	27
	.word	10388
	.byte	27
	.word	10406
	.byte	6,0,26
	.word	10735
	.byte	27
	.word	10768
	.byte	27
	.word	10782
	.byte	27
	.word	10800
	.byte	27
	.word	10814
	.byte	6,0,26
	.word	10934
	.byte	27
	.word	10962
	.byte	27
	.word	10976
	.byte	27
	.word	10994
	.byte	6,0,15,10,101,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,28
	.byte	'IfxPort_setPinMode',0,10,183,3,17,1,1,1,1,5
	.byte	'port',0,10,183,3,43
	.word	10212
	.byte	5
	.byte	'pinIndex',0,10,183,3,55
	.word	596
	.byte	5
	.byte	'mode',0,10,183,3,78
	.word	20344
	.byte	0,28
	.byte	'IfxPort_setPinPadDriver',0,10,207,3,17,1,1,1,1,5
	.byte	'port',0,10,207,3,48
	.word	10212
	.byte	5
	.byte	'pinIndex',0,10,207,3,60
	.word	596
	.byte	5
	.byte	'padDriver',0,10,207,3,88
	.word	19031
	.byte	0,26
	.word	11012
	.byte	27
	.word	11035
	.byte	17,30
	.word	11056
	.byte	31
	.word	11094
	.byte	0,6,0,0,26
	.word	11056
	.byte	6,0,26
	.word	18309
	.byte	27
	.word	18338
	.byte	27
	.word	18352
	.byte	27
	.word	18371
	.byte	6,0,26
	.word	18397
	.byte	27
	.word	18436
	.byte	27
	.word	18450
	.byte	6,0,26
	.word	18481
	.byte	27
	.word	18528
	.byte	27
	.word	18542
	.byte	6,0,26
	.word	18563
	.byte	27
	.word	18597
	.byte	6,0,26
	.word	18618
	.byte	27
	.word	18649
	.byte	27
	.word	18663
	.byte	6,0,26
	.word	18684
	.byte	27
	.word	18714
	.byte	27
	.word	18728
	.byte	6,0,26
	.word	18749
	.byte	27
	.word	18778
	.byte	6,0,28
	.byte	'IfxSent_resetModule',0,13,142,3,17,1,1,1,1,5
	.byte	'sent',0,13,142,3,47
	.word	17594
	.byte	0,28
	.byte	'IfxSent_initializeChannelUnitTime',0,13,185,3,17,1,1,1,1,5
	.byte	'sent',0,13,185,3,61
	.word	17594
	.byte	5
	.byte	'channelId',0,13,185,3,85
	.word	17599
	.byte	5
	.byte	'tUnit',0,13,185,3,104
	.word	217
	.byte	0,15,13,107,9,1,16
	.byte	'IfxSent_ClockDividerMode_off',0,0,16
	.byte	'IfxSent_ClockDividerMode_normal',0,1,16
	.byte	'IfxSent_ClockDividerMode_fractional',0,2,0,28
	.byte	'IfxSent_initializeModuleClock',0,13,193,3,17,1,1,1,1,5
	.byte	'sent',0,13,193,3,57
	.word	17594
	.byte	5
	.byte	'dividerMode',0,13,193,3,88
	.word	21455
	.byte	5
	.byte	'stepValue',0,13,193,3,108
	.word	613
	.byte	0,26
	.word	19454
	.byte	27
	.word	19482
	.byte	27
	.word	19498
	.byte	27
	.word	19517
	.byte	17,30
	.word	10342
	.byte	27
	.word	10374
	.byte	27
	.word	10388
	.byte	27
	.word	10406
	.byte	31
	.word	10420
	.byte	0,6,30
	.word	18309
	.byte	27
	.word	18338
	.byte	27
	.word	18352
	.byte	27
	.word	18371
	.byte	31
	.word	18395
	.byte	0,6,0,0,26
	.word	19621
	.byte	27
	.word	19648
	.byte	27
	.word	19664
	.byte	27
	.word	19684
	.byte	17,30
	.word	10735
	.byte	27
	.word	10768
	.byte	27
	.word	10782
	.byte	27
	.word	10800
	.byte	27
	.word	10814
	.byte	31
	.word	10829
	.byte	0,6,0,0,26
	.word	19707
	.byte	27
	.word	19743
	.byte	6,0,20,18,164,3,9,4,13
	.byte	'sent',0
	.word	17594
	.byte	4,2,35,0,0
.L84:
	.byte	3
	.word	21802
	.byte	20,18,174,4,9,12,13
	.byte	'module',0
	.word	17594
	.byte	4,2,35,0,13
	.byte	'sleepModeEnabled',0
	.word	596
	.byte	1,2,35,4,13
	.byte	'timeStampPreDivider',0
	.word	2484
	.byte	4,2,35,6,0,21
	.word	21828
.L93:
	.byte	3
	.word	21906
.L113:
	.byte	3
	.word	21828
	.byte	14
	.word	16857
.L124:
	.byte	3
	.word	21921
	.byte	20,18,146,4,9,12,13
	.byte	'driver',0
	.word	21823
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21926
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	17599
	.byte	1,2,35,8,0
.L117:
	.byte	3
	.word	21931
	.byte	15,13,124,9,1,16
	.byte	'IfxSent_DigitalGlitchesLength_off',0,0,16
	.byte	'IfxSent_DigitalGlitchesLength_1',0,1,16
	.byte	'IfxSent_DigitalGlitchesLength_2',0,2,16
	.byte	'IfxSent_DigitalGlitchesLength_3',0,3,16
	.byte	'IfxSent_DigitalGlitchesLength_4',0,4,16
	.byte	'IfxSent_DigitalGlitchesLength_5',0,5,16
	.byte	'IfxSent_DigitalGlitchesLength_6',0,6,16
	.byte	'IfxSent_DigitalGlitchesLength_7',0,7,16
	.byte	'IfxSent_DigitalGlitchesLength_8',0,8,16
	.byte	'IfxSent_DigitalGlitchesLength_9',0,9,16
	.byte	'IfxSent_DigitalGlitchesLength_10',0,10,16
	.byte	'IfxSent_DigitalGlitchesLength_11',0,11,16
	.byte	'IfxSent_DigitalGlitchesLength_12',0,12,16
	.byte	'IfxSent_DigitalGlitchesLength_13',0,13,16
	.byte	'IfxSent_DigitalGlitchesLength_14',0,14,16
	.byte	'IfxSent_DigitalGlitchesLength_15',0,15,0,15,13,154,1,9,1,16
	.byte	'IfxSent_ExternalTrigger_0',0,0,16
	.byte	'IfxSent_ExternalTrigger_1',0,1,16
	.byte	'IfxSent_ExternalTrigger_2',0,2,16
	.byte	'IfxSent_ExternalTrigger_3',0,3,16
	.byte	'IfxSent_ExternalTrigger_4',0,4,16
	.byte	'IfxSent_ExternalTrigger_5',0,5,16
	.byte	'IfxSent_ExternalTrigger_6',0,6,16
	.byte	'IfxSent_ExternalTrigger_7',0,7,16
	.byte	'IfxSent_ExternalTrigger_8',0,8,16
	.byte	'IfxSent_ExternalTrigger_9',0,9,16
	.byte	'IfxSent_ExternalTrigger_10',0,10,16
	.byte	'IfxSent_ExternalTrigger_11',0,11,16
	.byte	'IfxSent_ExternalTrigger_12',0,12,16
	.byte	'IfxSent_ExternalTrigger_13',0,13,16
	.byte	'IfxSent_ExternalTrigger_14',0,14,16
	.byte	'IfxSent_ExternalTrigger_15',0,15,0,20,18,179,3,9,8,13
	.byte	'inputPulsePolarityHigh',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'outputPulsePolarityHigh',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'edgeCounterCleared',0
	.word	596
	.byte	1,2,35,2,13
	.byte	'glitchFallingCleared',0
	.word	596
	.byte	1,2,35,3,13
	.byte	'glitchRisingCleared',0
	.word	596
	.byte	1,2,35,4,13
	.byte	'triggerMonitorCleared',0
	.word	596
	.byte	1,2,35,5,13
	.byte	'digitalGlitchFilterDepth',0
	.word	21995
	.byte	1,2,35,6,13
	.byte	'externalTrigger',0
	.word	22553
	.byte	1,2,35,7,0,15,13,176,1,9,1,16
	.byte	'IfxSent_FrameCheckMode_pastSyncPulse',0,0,16
	.byte	'IfxSent_FrameCheckMode_futureSuncPulse',0,1,0,15,13,146,1,9,1,16
	.byte	'IfxSent_ExtendedSerialFrameMode_standard',0,0,16
	.byte	'IfxSent_ExtendedSerialFrameMode_extended',0,1,0,20,18,240,3,9,16,13
	.byte	'crcModeDisabled',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'crcMethodDisabled',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'alternateCrcSelected',0
	.word	596
	.byte	1,2,35,2,13
	.byte	'serialDataProcessingEnabled',0
	.word	596
	.byte	1,2,35,3,13
	.byte	'serialDataDisabledCrcDisabled',0
	.word	596
	.byte	1,2,35,4,13
	.byte	'statusNibbleEnabled',0
	.word	596
	.byte	1,2,35,5,13
	.byte	'driftErrorsDisabled',0
	.word	596
	.byte	1,2,35,6,13
	.byte	'endPulseIgnored',0
	.word	596
	.byte	1,2,35,7,13
	.byte	'suspendTriggered',0
	.word	596
	.byte	1,2,35,8,13
	.byte	'frameLength',0
	.word	596
	.byte	1,2,35,9,13
	.byte	'frameCheckMode',0
	.word	23263
	.byte	1,2,35,10,13
	.byte	'extendedSerialFrameMode',0
	.word	23350
	.byte	1,2,35,11,13
	.byte	'frequencyDriftCheckEnabled',0
	.word	596
	.byte	1,2,35,12,0,15,13,249,1,9,1,16
	.byte	'IfxSent_TriggerSource_off',0,0,16
	.byte	'IfxSent_TriggerSource_immediate',0,1,16
	.byte	'IfxSent_TriggerSource_fallingEdge',0,2,16
	.byte	'IfxSent_TriggerSource_externalTrigger',0,3,0,15,13,241,1,9,1,16
	.byte	'IfxSent_TimeBase_measuredFrequency',0,0,16
	.byte	'IfxSent_TimeBase_nominalFrequency',0,1,0,15,13,223,1,9,1,16
	.byte	'IfxSent_SpcMode_sync',0,0,16
	.byte	'IfxSent_SpcMode_range',0,1,16
	.byte	'IfxSent_SpcMode_bidirectional',0,2,0,20,18,131,4,9,6,13
	.byte	'pulseLength',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'pulseDelayLength',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'triggerSource',0
	.word	23831
	.byte	1,2,35,2,13
	.byte	'timeBase',0
	.word	23976
	.byte	1,2,35,3,13
	.byte	'spcMode',0
	.word	24056
	.byte	1,2,35,4,0,15,13,184,1,9,1,16
	.byte	'IfxSent_InterruptNodePointer_trigo0',0,0,16
	.byte	'IfxSent_InterruptNodePointer_trigo1',0,1,16
	.byte	'IfxSent_InterruptNodePointer_trigo2',0,2,16
	.byte	'IfxSent_InterruptNodePointer_trigo3',0,3,16
	.byte	'IfxSent_InterruptNodePointer_trigo4',0,4,16
	.byte	'IfxSent_InterruptNodePointer_trigo5',0,5,16
	.byte	'IfxSent_InterruptNodePointer_trigo6',0,6,16
	.byte	'IfxSent_InterruptNodePointer_trigo7',0,7,16
	.byte	'IfxSent_InterruptNodePointer_trigo8',0,8,16
	.byte	'IfxSent_InterruptNodePointer_trigo9',0,9,0,20,18,201,3,9,8,13
	.byte	'receiveSuccessInterruptNode',0
	.word	24254
	.byte	1,2,35,0,13
	.byte	'receiveDataInterruptNode',0
	.word	24254
	.byte	1,2,35,1,13
	.byte	'receiveBufferOverflowInterruptNode',0
	.word	24254
	.byte	1,2,35,2,13
	.byte	'transferDataInterruptNode',0
	.word	24254
	.byte	1,2,35,3,13
	.byte	'transferBufferUnderflowInterruptNode',0
	.word	24254
	.byte	1,2,35,4,13
	.byte	'errorInterruptNode',0
	.word	24254
	.byte	1,2,35,5,13
	.byte	'serialDataReceiveInterruptNode',0
	.word	24254
	.byte	1,2,35,6,13
	.byte	'watchdogErrorInterruptNode',0
	.word	24254
	.byte	1,2,35,7,0,20,18,229,3,9,16,13
	.byte	'in',0
	.word	19026
	.byte	4,2,35,0,13
	.byte	'inMode',0
	.word	10217
	.byte	1,2,35,4,13
	.byte	'out',0
	.word	19616
	.byte	4,2,35,8,13
	.byte	'outMode',0
	.word	10422
	.byte	1,2,35,12,13
	.byte	'pinDriver',0
	.word	19031
	.byte	1,2,35,13,0,21
	.word	24948
.L162:
	.byte	3
	.word	25032
	.byte	15,13,200,1,9,1,16
	.byte	'IfxSent_Nibble_0',0,0,16
	.byte	'IfxSent_Nibble_1',0,1,16
	.byte	'IfxSent_Nibble_2',0,2,16
	.byte	'IfxSent_Nibble_3',0,3,16
	.byte	'IfxSent_Nibble_4',0,4,16
	.byte	'IfxSent_Nibble_5',0,5,16
	.byte	'IfxSent_Nibble_6',0,6,16
	.byte	'IfxSent_Nibble_7',0,7,0,20,18,215,3,9,8,13
	.byte	'nibblePointer0',0
	.word	25042
	.byte	1,2,35,0,13
	.byte	'nibblePointer1',0
	.word	25042
	.byte	1,2,35,1,13
	.byte	'nibblePointer2',0
	.word	25042
	.byte	1,2,35,2,13
	.byte	'nibblePointer3',0
	.word	25042
	.byte	1,2,35,3,13
	.byte	'nibblePointer4',0
	.word	25042
	.byte	1,2,35,4,13
	.byte	'nibblePointer5',0
	.word	25042
	.byte	1,2,35,5,13
	.byte	'nibblePointer6',0
	.word	25042
	.byte	1,2,35,6,13
	.byte	'nibblePointer7',0
	.word	25042
	.byte	1,2,35,7,0,20,18,193,3,9,4,13
	.byte	'priority',0
	.word	613
	.byte	2,2,35,0,13
	.byte	'isrProvider',0
	.word	2029
	.byte	1,2,35,2,0,20,18,140,3,9,16,13
	.byte	'receiveDataInterrupt',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'receiveSuccessInterrupt',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'receiveBufferOverflowInterrupt',0
	.word	596
	.byte	1,2,35,2,13
	.byte	'transferDataInterrupt',0
	.word	596
	.byte	1,2,35,3,13
	.byte	'transferBufferUnderflowInterrupt',0
	.word	596
	.byte	1,2,35,4,13
	.byte	'serialDataReceiveInterrupt',0
	.word	596
	.byte	1,2,35,5,13
	.byte	'watchdogErrorInterrupt',0
	.word	596
	.byte	1,2,35,6,13
	.byte	'serialDataCrcErrorInterrupt',0
	.word	596
	.byte	1,2,35,7,13
	.byte	'wrongStatusNibbleErrorInterrupt',0
	.word	596
	.byte	1,2,35,8,13
	.byte	'crcErrorInterrupt',0
	.word	596
	.byte	1,2,35,9,13
	.byte	'nibblesValueOutOfRangeErrorInterrupt',0
	.word	596
	.byte	1,2,35,10,13
	.byte	'nibblesWrongErrorInterrupt',0
	.word	596
	.byte	1,2,35,11,13
	.byte	'frequencyDriftErrorInterrupt',0
	.word	596
	.byte	1,2,35,12,13
	.byte	'frequencyRangeErrorInterrupt',0
	.word	596
	.byte	1,2,35,13,0,12,18,171,3,9,16,13
	.byte	'ALL',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'enable',0
	.word	25446
	.byte	16,2,35,0,0,20,18,155,4,9,88,13
	.byte	'driver',0
	.word	21823
	.byte	4,2,35,0,13
	.byte	'watchDogTimerLimit',0
	.word	613
	.byte	2,2,35,4,13
	.byte	'channelId',0
	.word	17599
	.byte	1,2,35,6,13
	.byte	'inputOutputControl',0
	.word	23014
	.byte	8,2,35,8,13
	.byte	'receiveControl',0
	.word	23443
	.byte	16,2,35,16,13
	.byte	'transmitControl',0
	.word	24142
	.byte	6,2,35,32,13
	.byte	'interuptNodeControl',0
	.word	24641
	.byte	8,2,35,40,13
	.byte	'pins',0
	.word	25037
	.byte	4,2,35,48,13
	.byte	'tUnit',0
	.word	217
	.byte	4,2,35,52,13
	.byte	'nibbleControl',0
	.word	25201
	.byte	8,2,35,56,13
	.byte	'interrupt',0
	.word	25400
	.byte	4,2,35,64,13
	.byte	'spcModeOn',0
	.word	596
	.byte	1,2,35,68,13
	.byte	'enabledInterrupts',0
	.word	25960
	.byte	16,2,35,72,0,21
	.word	25996
.L119:
	.byte	3
	.word	26289
.L251:
	.byte	3
	.word	25996
	.byte	20,18,183,4,9,12,13
	.byte	'data',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'timeStamp',0
	.word	2484
	.byte	4,2,35,4,13
	.byte	'statusNibble',0
	.word	596
	.byte	1,2,35,8,0
.L256:
	.byte	3
	.word	26304
	.byte	15,13,116,9,1,16
	.byte	'IfxSent_ConfigBit_0',0,0,16
	.byte	'IfxSent_ConfigBit_1',0,1,0,20,18,192,4,9,6,13
	.byte	'crc',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'messageId',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'serialData',0
	.word	613
	.byte	2,2,35,2,13
	.byte	'configBit',0
	.word	26371
	.byte	1,2,35,4,0
.L263:
	.byte	3
	.word	26421
	.byte	7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,19,1,1
	.word	26504
	.byte	32
	.byte	'__size_t',0,19,1,1
	.word	421
	.byte	32
	.byte	'__ptrdiff_t',0,19,1,1
	.word	437
	.byte	33,1,3
	.word	26572
	.byte	32
	.byte	'__codeptr',0,19,1,1
	.word	26574
	.byte	15,20,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,20,167,11,3
	.word	26597
	.byte	32
	.byte	'boolean',0,21,104,29
	.word	596
	.byte	32
	.byte	'uint8',0,21,108,29
	.word	596
	.byte	32
	.byte	'uint16',0,21,112,29
	.word	613
	.byte	32
	.byte	'uint32',0,21,116,29
	.word	2484
	.byte	32
	.byte	'uint64',0,21,121,29
	.word	303
	.byte	32
	.byte	'sint16',0,21,129,1,29
	.word	26504
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,21,134,1,29
	.word	26810
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,21,141,1,29
	.word	26838
	.byte	32
	.byte	'float32',0,21,170,1,29
	.word	217
	.byte	32
	.byte	'pvoid',0,17,54,28
	.word	335
	.byte	32
	.byte	'Ifx_TickTime',0,17,76,28
	.word	26838
	.byte	32
	.byte	'Ifx_Priority',0,17,100,16
	.word	613
	.byte	32
	.byte	'Ifx_RxSel',0,17,137,1,3
	.word	18833
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,22,96,24
	.word	596
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,22,98,24
	.word	421
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,22,101,24
	.word	437
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	27031
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	27590
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	27669
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	28229
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	28310
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	596
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	28527
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	596
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	596
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	28800
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	29126
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	29228
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	421
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	29330
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	421
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	29604
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	421
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	29973
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	30153
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	30322
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	30422
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	30522
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	30622
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	596
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	596
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	30722
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	613
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	30925
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	31157
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	31259
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	31387
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	596
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	596
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	421
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	596
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	31576
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	31940
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	32379
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	32590
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	613
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	613
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	32766
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	596
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	596
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	32960
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	613
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	421
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	33095
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	33231
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	596
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	596
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	596
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	33342
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	613
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	33560
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	33723
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	34059
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	596
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	596
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	34166
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	34618
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	34717
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	421
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	34867
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	421
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	35105
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	613
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	421
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	35266
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	35372
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	613
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	35458
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	613
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	35626
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	35794
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	596
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	613
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	36108
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	613
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	613
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	36219
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	596
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	596
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	36377
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	36788
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	36889
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	37207
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	37394
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	37505
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	37638
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	613
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	37841
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	38081
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	421
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	38225
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	38447
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	38583
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	38719
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	38855
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	38991
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	421
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	39127
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	613
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	39263
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	596
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	421
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	596
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	39535
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	39780
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	40168
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	40286
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	613
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	40529
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	596
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	596
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	596
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	596
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	596
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	596
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	596
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	596
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	613
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	40796
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	613
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	41055
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	41360
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	596
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	41441
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	41990
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	421
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	42120
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	613
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	42311
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	613
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	42489
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	42640
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	42712
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	42784
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	42856
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	42928
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	43000
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	596
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	596
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	43072
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	613
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	43401
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	43521
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	596
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	43691
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	613
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	596
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	596
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	596
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	596
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	43954
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	421
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	44233
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	613
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	44337
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	421
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	44443
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	44666
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	596
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	44814
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	45302
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	45599
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	45747
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	460
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	635
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	901
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	444
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	45997
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	46123
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	596
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	46375
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27031
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	46594
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27590
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	46659
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27669
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	46724
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28229
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	46789
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28310
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	46854
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28527
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	46919
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28800
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	46984
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29126
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	47049
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29228
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	47115
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29330
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	47181
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29604
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	47246
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29973
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	47311
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30153
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	47376
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30322
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	47441
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30422
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	47506
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30522
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	47571
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30622
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	47636
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30722
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	47701
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30925
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	47765
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31157
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	47830
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31259
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	47896
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31387
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	47960
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	48024
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31940
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	48086
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32379
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	48150
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32590
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	48212
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32766
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	48274
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32960
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	48336
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33095
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	48399
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	48472
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33342
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	48537
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33560
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	48601
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33723
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	48662
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34059
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	48723
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34166
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	48783
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34618
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	48845
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34717
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	48905
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34867
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	48967
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35105
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	49035
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	49103
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35372
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	49171
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35458
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	49239
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35626
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	49304
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35794
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	49369
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36108
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	49434
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36219
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	49497
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36377
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	49558
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36788
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	49622
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36889
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	49683
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37207
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	49747
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37394
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	49814
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	49877
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37638
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	49938
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37841
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	50000
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38081
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	50068
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38225
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	50136
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38447
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	50204
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38583
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	50268
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38719
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	50332
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38855
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	50396
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38991
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	50460
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39127
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	50524
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39263
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	50588
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39535
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	50653
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39780
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	50718
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40168
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	50784
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40286
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	50850
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40529
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	50916
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40796
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	50982
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41055
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	51046
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41360
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	51111
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41441
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	51176
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41990
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	51241
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42120
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	51306
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42311
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	51371
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42489
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	51434
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	51497
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42712
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	51561
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42784
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	51625
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42856
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	51689
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42928
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	51753
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43000
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	51817
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43072
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	51881
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43401
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	51945
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43521
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	52011
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43691
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	52077
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43954
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	52141
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44233
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	52209
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44337
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	52277
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44443
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	52345
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44666
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	52413
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44814
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	52478
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45302
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	52544
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45599
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	52610
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45747
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	52675
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	556
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	861
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1092
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45997
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	52826
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46123
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	52893
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46375
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	52960
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	48399
	.byte	4,2,35,0,0,14
	.word	53025
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	53066
	.byte	14
	.word	1132
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	53096
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	52826
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	52893
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	52960
	.byte	4,2,35,8,0,14
	.word	53125
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	53186
	.byte	18,8
	.word	53025
	.byte	19,1,0,14
	.word	53213
	.byte	18,16
	.word	596
	.byte	19,15,0,18,20
	.word	596
	.byte	19,19,0,18,36
	.word	596
	.byte	19,35,0,18,16
	.word	48024
	.byte	19,3,0,18,16
	.word	48783
	.byte	19,3,0,18,72
	.word	1132
	.byte	19,5,0,14
	.word	53272
	.byte	14
	.word	53125
	.byte	18,176,2
	.word	596
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	5542
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	48723
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3722
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	49558
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	52345
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	52141
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	52209
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	52277
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	50136
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	50000
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	50068
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	46919
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	46984
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	48601
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	48537
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	47181
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	47246
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	47311
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	47376
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	51176
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3722
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	50982
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	46854
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	52011
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	51046
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	51111
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3722
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	53222
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	48472
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	52077
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	47441
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	47506
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	47571
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	47636
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	47049
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	47115
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3722
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	49877
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	48905
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	49622
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	49497
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	48845
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	53227
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	51881
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	51434
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	50204
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	50268
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	50332
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	50396
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	50460
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	50524
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3722
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	50588
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	50653
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	53227
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	48274
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	48336
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	47830
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	47765
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	53236
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	52544
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	52675
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	52610
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	52413
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	52478
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	49239
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	49304
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	49369
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	47701
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	49434
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3722
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	51945
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	53236
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	48967
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	49035
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	49103
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	49171
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	53227
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	51497
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	51561
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	49814
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	5542
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	50718
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	50784
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	50850
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	50916
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4913
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	51625
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	51689
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	51753
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	51817
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	53227
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	49747
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	49683
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	53245
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	48086
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	53254
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	48150
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	48662
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	49938
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	53263
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	53227
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	53281
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	5542
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	47896
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	47960
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	48212
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	53286
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	51241
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	51306
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	51371
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	53291
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	46789
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	46724
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	46659
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	46594
	.byte	4,3,35,252,7,0,14
	.word	53302
	.byte	32
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	55423
	.byte	32
	.byte	'IfxSent_ChannelId',0,15,113,3
	.word	17599
	.byte	32
	.byte	'IfxSrc_Tos',0,7,75,3
	.word	2029
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,6,85,3
	.word	1610
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,6,98,3
	.word	1900
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,6,110,25,4,13
	.byte	'SB',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	55537
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,6,113,3
	.word	55572
	.byte	18,24
	.word	55537
	.byte	19,5,0,14
	.word	55601
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,6,128,1,25,24,13
	.byte	'CPU',0
	.word	55610
	.byte	24,2,35,0,0,14
	.word	55615
	.byte	32
	.byte	'Ifx_SRC_CPU',0,6,131,1,3
	.word	55648
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,6,146,1,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	55674
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,6,149,1,3
	.word	55712
	.byte	18,4
	.word	55674
	.byte	19,0,0,14
	.word	55744
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,6,164,1,25,4,13
	.byte	'AGBT',0
	.word	55753
	.byte	4,2,35,0,0,14
	.word	55758
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,6,167,1,3
	.word	55793
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,6,182,1,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	55820
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,6,185,1,3
	.word	55858
	.byte	18,12
	.word	55820
	.byte	19,2,0,14
	.word	55890
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,6,200,1,25,12,13
	.byte	'XBAR',0
	.word	55899
	.byte	12,2,35,0,0,14
	.word	55904
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,6,203,1,3
	.word	55939
	.byte	18,8
	.word	1900
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,6,218,1,25,8,13
	.byte	'SR',0
	.word	55966
	.byte	8,2,35,0,0,14
	.word	55975
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,6,221,1,3
	.word	56021
	.byte	14
	.word	55975
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,6,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	56061
	.byte	8,2,35,0,0,14
	.word	56066
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,6,239,1,3
	.word	56109
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,6,254,1,25,12,13
	.byte	'TX',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,8,0,14
	.word	56140
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,6,131,2,3
	.word	56207
	.byte	18,144,1
	.word	56140
	.byte	19,11,0,14
	.word	56243
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,6,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	56253
	.byte	144,1,2,35,0,0,14
	.word	56258
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,6,149,2,3
	.word	56299
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,6,164,2,25,20,13
	.byte	'TX',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	1900
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	1900
	.byte	4,2,35,16,0,14
	.word	56328
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,6,171,2,3
	.word	56414
	.byte	18,120
	.word	56328
	.byte	19,5,0,14
	.word	56446
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,6,186,2,25,120,13
	.byte	'QSPI',0
	.word	56455
	.byte	120,2,35,0,0,14
	.word	56460
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,6,189,2,3
	.word	56495
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,6,204,2,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	56522
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,6,207,2,3
	.word	56560
	.byte	18,8
	.word	56522
	.byte	19,1,0,14
	.word	56592
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,6,222,2,25,8,13
	.byte	'HSCT',0
	.word	56601
	.byte	8,2,35,0,0,14
	.word	56606
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,6,225,2,3
	.word	56641
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,6,240,2,25,16,13
	.byte	'COK',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	1900
	.byte	4,2,35,12,0,14
	.word	56668
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,6,246,2,3
	.word	56749
	.byte	18,64
	.word	56668
	.byte	19,3,0,14
	.word	56784
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,6,133,3,25,68,13
	.byte	'CH',0
	.word	56793
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	1900
	.byte	4,2,35,64,0,14
	.word	56798
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,6,137,3,3
	.word	56849
	.byte	18,136,1
	.word	56798
	.byte	19,1,0,14
	.word	56881
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,6,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	56891
	.byte	136,1,2,35,0,0,14
	.word	56896
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,6,155,3,3
	.word	56933
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,6,170,3,25,16,13
	.byte	'DTR',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3722
	.byte	4,2,35,12,0,14
	.word	56960
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,6,176,3,3
	.word	57041
	.byte	18,32
	.word	56960
	.byte	19,1,0,14
	.word	57071
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,6,191,3,25,32,13
	.byte	'I2C',0
	.word	57080
	.byte	32,2,35,0,0,14
	.word	57085
	.byte	32
	.byte	'Ifx_SRC_I2C',0,6,194,3,3
	.word	57118
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,6,209,3,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	57144
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,6,212,3,3
	.word	57182
	.byte	18,40
	.word	57144
	.byte	19,9,0,14
	.word	57214
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,6,227,3,25,40,13
	.byte	'SENT',0
	.word	57223
	.byte	40,2,35,0,0,14
	.word	57228
	.byte	32
	.byte	'Ifx_SRC_SENT',0,6,230,3,3
	.word	57263
	.byte	18,20
	.word	1900
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,6,245,3,25,20,13
	.byte	'SR',0
	.word	57290
	.byte	20,2,35,0,0,14
	.word	57299
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,6,248,3,3
	.word	57335
	.byte	18,80
	.word	57299
	.byte	19,3,0,14
	.word	57365
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,6,135,4,25,80,13
	.byte	'MSC',0
	.word	57374
	.byte	80,2,35,0,0,14
	.word	57379
	.byte	32
	.byte	'Ifx_SRC_MSC',0,6,138,4,3
	.word	57412
	.byte	18,16
	.word	1900
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,6,153,4,25,16,13
	.byte	'SR',0
	.word	57438
	.byte	16,2,35,0,0,14
	.word	57447
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,6,156,4,3
	.word	57484
	.byte	18,32
	.word	57447
	.byte	19,1,0,14
	.word	57515
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,6,171,4,25,32,13
	.byte	'CCU',0
	.word	57524
	.byte	32,2,35,0,0,14
	.word	57529
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,6,174,4,3
	.word	57563
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,6,189,4,25,24,13
	.byte	'CIRQ',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	1900
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	1900
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	1900
	.byte	4,2,35,20,0,14
	.word	57590
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,6,197,4,3
	.word	57692
	.byte	18,24
	.word	57590
	.byte	19,0,0,14
	.word	57726
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,6,212,4,25,24,13
	.byte	'GPT12',0
	.word	57735
	.byte	24,2,35,0,0,14
	.word	57740
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,6,215,4,3
	.word	57777
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,6,230,4,25,8,13
	.byte	'SR',0
	.word	55966
	.byte	8,2,35,0,0,14
	.word	57805
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,6,233,4,3
	.word	57841
	.byte	18,48
	.word	57805
	.byte	19,5,0,14
	.word	57871
	.byte	10
	.byte	'_Ifx_SRC_STM',0,6,248,4,25,48,13
	.byte	'STM',0
	.word	57880
	.byte	48,2,35,0,0,14
	.word	57885
	.byte	32
	.byte	'Ifx_SRC_STM',0,6,251,4,3
	.word	57918
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,6,138,5,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	57944
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,6,141,5,3
	.word	57981
	.byte	14
	.word	57944
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,6,156,5,25,4,13
	.byte	'FCE0',0
	.word	58012
	.byte	4,2,35,0,0,14
	.word	58017
	.byte	32
	.byte	'Ifx_SRC_FCE',0,6,159,5,3
	.word	58051
	.byte	18,32
	.word	596
	.byte	19,31,0,18,128,4
	.word	1900
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,6,174,5,25,176,4,13
	.byte	'ERR',0
	.word	57438
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	58077
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	58086
	.byte	128,4,2,35,48,0,14
	.word	58096
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,6,179,5,3
	.word	58168
	.byte	18,176,4
	.word	58096
	.byte	19,0,0,14
	.word	58198
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,6,194,5,25,176,4,13
	.byte	'DMA',0
	.word	58208
	.byte	176,4,2,35,0,0,14
	.word	58213
	.byte	32
	.byte	'Ifx_SRC_DMA',0,6,197,5,3
	.word	58248
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,6,212,5,25,8,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	1900
	.byte	4,2,35,4,0,14
	.word	58274
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,6,216,5,3
	.word	58328
	.byte	18,8
	.word	58274
	.byte	19,0,0,14
	.word	58362
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,6,231,5,25,8,13
	.byte	'SDMMC',0
	.word	58371
	.byte	8,2,35,0,0,14
	.word	58376
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,6,234,5,3
	.word	58413
	.byte	18,40
	.word	1900
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,6,249,5,25,40,13
	.byte	'SR',0
	.word	58441
	.byte	40,2,35,0,0,14
	.word	58450
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,6,252,5,3
	.word	58488
	.byte	18,40
	.word	58450
	.byte	19,0,0,14
	.word	58520
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,6,139,6,25,40,13
	.byte	'GETH',0
	.word	58529
	.byte	40,2,35,0,0,14
	.word	58534
	.byte	32
	.byte	'Ifx_SRC_GETH',0,6,142,6,3
	.word	58569
	.byte	18,64
	.word	1900
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,6,157,6,25,64,13
	.byte	'INT',0
	.word	58596
	.byte	64,2,35,0,0,14
	.word	58605
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,6,160,6,3
	.word	58642
	.byte	18,192,1
	.word	58605
	.byte	19,2,0,14
	.word	58672
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,6,175,6,25,192,1,13
	.byte	'CAN',0
	.word	58682
	.byte	192,1,2,35,0,0,14
	.word	58687
	.byte	32
	.byte	'Ifx_SRC_CAN',0,6,178,6,3
	.word	58722
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,6,193,6,25,16,13
	.byte	'SR0',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	1900
	.byte	4,2,35,12,0,14
	.word	58748
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,6,199,6,3
	.word	58823
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,6,214,6,25,4,13
	.byte	'SR0',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	58852
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,6,217,6,3
	.word	58889
	.byte	18,192,1
	.word	58748
	.byte	19,11,0,14
	.word	58919
	.byte	18,32
	.word	58852
	.byte	19,7,0,14
	.word	58934
	.byte	18,32
	.word	58748
	.byte	19,1,0,14
	.word	58948
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,6,233,6,25,128,2,13
	.byte	'G',0
	.word	58929
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	58943
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	58957
	.byte	32,3,35,224,1,0,14
	.word	58962
	.byte	32
	.byte	'Ifx_SRC_VADC',0,6,238,6,3
	.word	59022
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,6,253,6,25,8,13
	.byte	'SRM',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	1900
	.byte	4,2,35,4,0,14
	.word	59049
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,6,129,7,3
	.word	59103
	.byte	18,112
	.word	59049
	.byte	19,13,0,14
	.word	59137
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,6,144,7,25,112,13
	.byte	'DSADC',0
	.word	59146
	.byte	112,2,35,0,0,14
	.word	59151
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,6,147,7,3
	.word	59188
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,6,162,7,25,48,13
	.byte	'INT0',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	1900
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	1900
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	1900
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	1900
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	1900
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	1900
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	1900
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	5542
	.byte	8,2,35,40,0,14
	.word	59216
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,6,175,7,3
	.word	59411
	.byte	18,96
	.word	59216
	.byte	19,1,0,14
	.word	59443
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,6,190,7,25,96,13
	.byte	'ERAY',0
	.word	59452
	.byte	96,2,35,0,0,14
	.word	59457
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,6,193,7,3
	.word	59492
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,6,208,7,25,8,13
	.byte	'HSM',0
	.word	55966
	.byte	8,2,35,0,0,14
	.word	59519
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,6,211,7,3
	.word	59556
	.byte	18,8
	.word	59519
	.byte	19,0,0,14
	.word	59586
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,6,226,7,25,8,13
	.byte	'HSM',0
	.word	59595
	.byte	8,2,35,0,0,14
	.word	59600
	.byte	32
	.byte	'Ifx_SRC_HSM',0,6,229,7,3
	.word	59633
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,6,244,7,25,16,13
	.byte	'SCUERU',0
	.word	57438
	.byte	16,2,35,0,0,14
	.word	59659
	.byte	32
	.byte	'Ifx_SRC_SCU',0,6,247,7,3
	.word	59695
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,6,134,8,25,4,13
	.byte	'SR',0
	.word	1900
	.byte	4,2,35,0,0,14
	.word	59721
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,6,137,8,3
	.word	59757
	.byte	18,16
	.word	59721
	.byte	19,3,0,14
	.word	59787
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,6,152,8,25,16,13
	.byte	'PMS',0
	.word	59796
	.byte	16,2,35,0,0,14
	.word	59801
	.byte	32
	.byte	'Ifx_SRC_PMS',0,6,155,8,3
	.word	59834
	.byte	18,12
	.word	1900
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,6,170,8,25,12,13
	.byte	'SR',0
	.word	59860
	.byte	12,2,35,0,0,14
	.word	59869
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,6,173,8,3
	.word	59905
	.byte	18,12
	.word	59869
	.byte	19,0,0,14
	.word	59935
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,6,188,8,25,12,13
	.byte	'SMU',0
	.word	59944
	.byte	12,2,35,0,0,14
	.word	59949
	.byte	32
	.byte	'Ifx_SRC_SMU',0,6,191,8,3
	.word	59982
	.byte	18,32
	.word	1900
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,6,206,8,25,32,13
	.byte	'SR',0
	.word	60008
	.byte	32,2,35,0,0,14
	.word	60017
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,6,209,8,3
	.word	60055
	.byte	18,32
	.word	60017
	.byte	19,0,0,14
	.word	60087
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,6,224,8,25,32,13
	.byte	'PSI5',0
	.word	60096
	.byte	32,2,35,0,0,14
	.word	60101
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,6,227,8,3
	.word	60136
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,6,242,8,25,12,13
	.byte	'BFR',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,8,0,14
	.word	60163
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,6,247,8,3
	.word	60232
	.byte	14
	.word	60163
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,6,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	60267
	.byte	12,2,35,0,0,14
	.word	60272
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,6,137,9,3
	.word	60310
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,6,152,9,25,24,13
	.byte	'LI0',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	1900
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	1900
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	1900
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	1900
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,20,0,14
	.word	60338
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,6,160,9,3
	.word	60439
	.byte	18,48
	.word	60338
	.byte	19,1,0,14
	.word	60469
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,6,175,9,25,48,13
	.byte	'DAM',0
	.word	60478
	.byte	48,2,35,0,0,14
	.word	60483
	.byte	32
	.byte	'Ifx_SRC_DAM',0,6,178,9,3
	.word	60516
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,6,193,9,25,32,13
	.byte	'SR',0
	.word	60008
	.byte	32,2,35,0,0,14
	.word	60542
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,6,196,9,3
	.word	60582
	.byte	18,32
	.word	60542
	.byte	19,0,0,14
	.word	60616
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,6,211,9,25,32,13
	.byte	'PSI5S',0
	.word	60625
	.byte	32,2,35,0,0,14
	.word	60630
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,6,214,9,3
	.word	60667
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,6,229,9,25,8,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	1900
	.byte	4,2,35,4,0,14
	.word	60695
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,6,233,9,3
	.word	60745
	.byte	18,16
	.word	60695
	.byte	19,1,0,14
	.word	60775
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,6,248,9,25,16,13
	.byte	'RIF',0
	.word	60784
	.byte	16,2,35,0,0,14
	.word	60789
	.byte	32
	.byte	'Ifx_SRC_RIF',0,6,251,9,3
	.word	60822
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,6,138,10,25,8,13
	.byte	'INT',0
	.word	1900
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	1900
	.byte	4,2,35,4,0,14
	.word	60848
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,6,142,10,3
	.word	60898
	.byte	18,16
	.word	60848
	.byte	19,1,0,14
	.word	60928
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,6,157,10,25,16,13
	.byte	'SPU',0
	.word	60937
	.byte	16,2,35,0,0,14
	.word	60942
	.byte	32
	.byte	'Ifx_SRC_SPU',0,6,160,10,3
	.word	60975
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,6,175,10,25,32,13
	.byte	'SR',0
	.word	60008
	.byte	32,2,35,0,0,14
	.word	61001
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,6,178,10,3
	.word	61039
	.byte	18,192,1
	.word	61001
	.byte	19,5,0,14
	.word	61071
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,6,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	61081
	.byte	192,1,2,35,0,0,14
	.word	61086
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,6,196,10,3
	.word	61123
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,23,68,16,4,11
	.byte	'ADDR',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,23,71,3
	.word	61150
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,23,74,16,4,11
	.byte	'VSS',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,23,78,3
	.word	61211
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,23,81,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	444
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	444
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,23,87,3
	.word	61290
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,23,90,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	444
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,23,95,3
	.word	61428
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,23,98,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	444
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	444
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,23,106,3
	.word	61549
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,23,109,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,23,113,3
	.word	61725
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,23,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,23,120,3
	.word	61811
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,23,123,16,4,11
	.byte	'CM',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	444
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	444
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,23,131,1,3
	.word	61900
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,23,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,23,140,1,3
	.word	62047
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,23,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,23,147,1,3
	.word	62176
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,23,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,23,154,1,3
	.word	62276
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,23,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,23,161,1,3
	.word	62371
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,23,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	444
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,23,169,1,3
	.word	62466
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,23,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	444
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,23,176,1,3
	.word	62576
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,23,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,23,187,1,3
	.word	62668
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,23,190,1,16,4,11
	.byte	'CID',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,23,194,1,3
	.word	62822
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,23,197,1,16,4,11
	.byte	'DATA',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,23,200,1,3
	.word	62916
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,23,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,23,214,1,3
	.word	62979
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,23,217,1,16,4,11
	.byte	'DE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	444
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	444
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,23,228,1,3
	.word	63205
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,23,231,1,16,4,11
	.byte	'DTA',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,23,235,1,3
	.word	63420
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,23,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,23,243,1,3
	.word	63514
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,23,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,23,250,1,3
	.word	63630
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,23,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	444
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,23,129,2,3
	.word	63731
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,23,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,23,135,2,3
	.word	63824
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,23,138,2,16,4,11
	.byte	'TA',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,23,141,2,3
	.word	63904
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,23,144,2,16,4,11
	.byte	'IED',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	444
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,23,159,2,3
	.word	63973
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,23,162,2,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,23,196,2,3
	.word	64257
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,23,199,2,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,23,233,2,3
	.word	64848
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,23,236,2,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,23,142,3,3
	.word	65439
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,23,145,3,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,23,179,3,3
	.word	66040
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,23,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,23,186,3,3
	.word	66641
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,23,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,23,193,3,3
	.word	66756
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,23,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,23,200,3,3
	.word	66871
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,23,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	444
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,23,207,3,3
	.word	66964
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,23,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	444
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,23,214,3,3
	.word	67056
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,23,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	444
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,23,221,3,3
	.word	67151
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,23,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	444
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,23,228,3,3
	.word	67246
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,23,231,3,16,4,11
	.byte	'SRE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,23,250,3,3
	.word	67338
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,23,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,23,133,4,3
	.word	67677
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,23,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,23,141,4,3
	.word	67831
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,23,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	444
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	444
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	444
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	444
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,23,154,4,3
	.word	67937
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,23,157,4,16,4,11
	.byte	'STALL',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	444
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,23,165,4,3
	.word	68155
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,23,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	444
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	444
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	444
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	444
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	444
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	444
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	444
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,23,182,4,3
	.word	68346
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,23,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,23,198,4,3
	.word	68646
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,23,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,23,205,4,3
	.word	68951
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,23,208,4,16,4,11
	.byte	'TST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,23,227,4,3
	.word	69052
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,23,230,4,16,4,11
	.byte	'OPC',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,23,237,4,3
	.word	69401
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,23,240,4,16,4,11
	.byte	'PC',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,23,243,4,3
	.word	69561
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,23,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,23,249,4,3
	.word	69642
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,23,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,23,255,4,3
	.word	69729
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,23,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,23,133,5,3
	.word	69816
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,23,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,23,140,5,3
	.word	69903
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,23,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,23,150,5,3
	.word	69994
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,23,153,5,16,4,11
	.byte	'ISP',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,23,156,5,3
	.word	70136
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,23,159,5,16,4,11
	.byte	'RST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	444
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,23,164,5,3
	.word	70202
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,23,167,5,16,4,11
	.byte	'RST',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,23,171,5,3
	.word	70313
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,23,174,5,16,4,11
	.byte	'CLR',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,23,178,5,3
	.word	70405
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,23,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,23,186,5,3
	.word	70501
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,23,189,5,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,23,223,5,3
	.word	70607
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,23,226,5,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,23,132,6,3
	.word	71190
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,23,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,23,139,6,3
	.word	71783
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,23,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,23,146,6,3
	.word	71876
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,23,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	444
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,23,153,6,3
	.word	71969
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,23,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,23,159,6,3
	.word	72062
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,23,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	444
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,23,166,6,3
	.word	72135
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,23,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,23,174,6,3
	.word	72220
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,23,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,23,182,6,3
	.word	72336
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,23,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,23,189,6,3
	.word	72447
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,23,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	444
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,23,200,6,3
	.word	72548
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,23,203,6,16,4,11
	.byte	'TA',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,23,206,6,3
	.word	72701
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,23,209,6,16,4,11
	.byte	'IED',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	444
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,23,224,6,3
	.word	72770
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,23,227,6,16,4,11
	.byte	'DAC',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,23,231,6,3
	.word	73054
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,23,234,6,16,4,11
	.byte	'CAC',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,23,238,6,3
	.word	73145
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,23,241,6,16,4,11
	.byte	'PSI',0,4
	.word	444
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,23,245,6,3
	.word	73236
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,23,248,6,16,4,11
	.byte	'FRE',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,23,130,7,3
	.word	73327
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,23,133,7,16,4,11
	.byte	'CDC',0,4
	.word	444
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	444
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	444
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,23,145,7,3
	.word	73530
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,23,148,7,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,23,182,7,3
	.word	73735
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,23,185,7,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,23,219,7,3
	.word	74302
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,23,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,23,226,7,3
	.word	74879
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,23,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,23,233,7,3
	.word	74974
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,23,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	444
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,23,242,7,3
	.word	75069
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,23,245,7,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,23,151,8,3
	.word	75197
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,23,154,8,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,23,188,8,3
	.word	75780
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,23,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,23,196,8,3
	.word	76373
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,23,199,8,16,4,11
	.byte	'EN0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,23,233,8,3
	.word	76491
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,23,236,8,16,4,11
	.byte	'EN32',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,23,142,9,3
	.word	77080
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,23,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,23,153,9,3
	.word	77679
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,23,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,23,171,9,3
	.word	77833
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,23,174,9,16,4,11
	.byte	'ASI',0,4
	.word	444
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	444
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,23,178,9,3
	.word	78132
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,23,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,23,189,9,3
	.word	78230
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,23,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,23,196,9,3
	.word	78402
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,23,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	444
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,23,203,9,3
	.word	78531
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,23,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	444
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,23,211,9,3
	.word	78661
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,23,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,23,218,9,3
	.word	78813
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,23,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	444
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,23,226,9,3
	.word	78940
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,23,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	444
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,23,233,9,3
	.word	79089
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,23,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	444
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	444
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,23,246,9,3
	.word	79203
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,23,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,23,252,9,3
	.word	79447
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,23,255,9,16,4,11
	.byte	'T0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,23,138,10,3
	.word	79527
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,23,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	444
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,23,144,10,3
	.word	79722
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,23,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	444
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	444
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,23,164,10,3
	.word	79795
	.byte	12,23,172,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61150
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,23,177,10,3
	.word	80113
	.byte	12,23,180,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61211
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,23,185,10,3
	.word	80172
	.byte	12,23,188,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61290
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,23,193,10,3
	.word	80233
	.byte	12,23,196,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61428
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,23,201,10,3
	.word	80300
	.byte	12,23,204,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61549
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,23,209,10,3
	.word	80366
	.byte	12,23,212,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61725
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,23,217,10,3
	.word	80432
	.byte	12,23,220,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61811
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,23,225,10,3
	.word	80493
	.byte	12,23,228,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61900
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,23,233,10,3
	.word	80555
	.byte	12,23,236,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62047
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,23,241,10,3
	.word	80618
	.byte	12,23,244,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62176
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,23,249,10,3
	.word	80682
	.byte	12,23,252,10,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62276
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,23,129,11,3
	.word	80747
	.byte	12,23,132,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62371
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,23,137,11,3
	.word	80810
	.byte	12,23,140,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62466
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,23,145,11,3
	.word	80873
	.byte	12,23,148,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,23,153,11,3
	.word	80937
	.byte	12,23,156,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62668
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,23,161,11,3
	.word	80999
	.byte	12,23,164,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62822
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,23,169,11,3
	.word	81062
	.byte	12,23,172,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62916
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,23,177,11,3
	.word	81126
	.byte	12,23,180,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62979
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,23,185,11,3
	.word	81185
	.byte	12,23,188,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63205
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,23,193,11,3
	.word	81247
	.byte	12,23,196,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63420
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,23,201,11,3
	.word	81310
	.byte	12,23,204,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63514
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,23,209,11,3
	.word	81374
	.byte	12,23,212,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63630
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,23,217,11,3
	.word	81437
	.byte	12,23,220,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63731
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,23,225,11,3
	.word	81500
	.byte	12,23,228,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63824
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,23,233,11,3
	.word	81561
	.byte	12,23,236,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63904
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,23,241,11,3
	.word	81624
	.byte	12,23,244,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63973
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,23,249,11,3
	.word	81687
	.byte	12,23,252,11,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64257
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,23,129,12,3
	.word	81750
	.byte	12,23,132,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64848
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,23,137,12,3
	.word	81830
	.byte	12,23,140,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65439
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,23,145,12,3
	.word	81910
	.byte	12,23,148,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66040
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,23,153,12,3
	.word	81990
	.byte	12,23,156,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66641
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,23,161,12,3
	.word	82070
	.byte	12,23,164,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66756
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,23,169,12,3
	.word	82144
	.byte	12,23,172,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66871
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,23,177,12,3
	.word	82218
	.byte	12,23,180,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66964
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,23,185,12,3
	.word	82279
	.byte	12,23,188,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67056
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,23,193,12,3
	.word	82341
	.byte	12,23,196,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67151
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,23,201,12,3
	.word	82404
	.byte	12,23,204,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67246
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,23,209,12,3
	.word	82467
	.byte	12,23,212,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67338
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,23,217,12,3
	.word	82529
	.byte	12,23,220,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67677
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,23,225,12,3
	.word	82591
	.byte	12,23,228,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67831
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,23,233,12,3
	.word	82654
	.byte	12,23,236,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67937
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,23,241,12,3
	.word	82715
	.byte	12,23,244,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68155
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,23,249,12,3
	.word	82782
	.byte	12,23,252,12,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68346
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,23,129,13,3
	.word	82849
	.byte	12,23,132,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68646
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,23,137,13,3
	.word	82916
	.byte	12,23,140,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68951
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,23,145,13,3
	.word	82983
	.byte	12,23,148,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69052
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,23,153,13,3
	.word	83050
	.byte	12,23,156,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69401
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,23,161,13,3
	.word	83120
	.byte	12,23,164,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69561
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,23,169,13,3
	.word	83190
	.byte	12,23,172,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69642
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,23,177,13,3
	.word	83259
	.byte	12,23,180,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69729
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,23,185,13,3
	.word	83330
	.byte	12,23,188,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69816
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,23,193,13,3
	.word	83401
	.byte	12,23,196,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69903
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,23,201,13,3
	.word	83472
	.byte	12,23,204,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69994
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,23,209,13,3
	.word	83534
	.byte	12,23,212,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70136
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,23,217,13,3
	.word	83595
	.byte	12,23,220,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70202
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,23,225,13,3
	.word	83656
	.byte	12,23,228,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70313
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,23,233,13,3
	.word	83719
	.byte	12,23,236,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70405
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,23,241,13,3
	.word	83782
	.byte	12,23,244,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70501
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,23,249,13,3
	.word	83847
	.byte	12,23,252,13,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70607
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,23,129,14,3
	.word	83908
	.byte	12,23,132,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71190
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,23,137,14,3
	.word	83984
	.byte	12,23,140,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71783
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,23,145,14,3
	.word	84060
	.byte	12,23,148,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71876
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,23,153,14,3
	.word	84123
	.byte	12,23,156,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71969
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,23,161,14,3
	.word	84186
	.byte	12,23,164,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72062
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,23,169,14,3
	.word	84249
	.byte	12,23,172,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72135
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,23,177,14,3
	.word	84311
	.byte	12,23,180,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72220
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,23,185,14,3
	.word	84371
	.byte	12,23,188,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72336
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,23,193,14,3
	.word	84434
	.byte	12,23,196,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72447
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,23,201,14,3
	.word	84497
	.byte	12,23,204,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72548
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,23,209,14,3
	.word	84560
	.byte	12,23,212,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,23,217,14,3
	.word	84622
	.byte	12,23,220,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,23,225,14,3
	.word	84685
	.byte	12,23,228,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73054
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,23,233,14,3
	.word	84748
	.byte	12,23,236,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,23,241,14,3
	.word	84810
	.byte	12,23,244,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73236
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,23,249,14,3
	.word	84872
	.byte	12,23,252,14,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73327
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,23,129,15,3
	.word	84934
	.byte	12,23,132,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73530
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,23,137,15,3
	.word	84996
	.byte	12,23,140,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73735
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,23,145,15,3
	.word	85057
	.byte	12,23,148,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74302
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,23,153,15,3
	.word	85125
	.byte	12,23,156,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,23,161,15,3
	.word	85193
	.byte	12,23,164,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74974
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,23,169,15,3
	.word	85257
	.byte	12,23,172,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75069
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,23,177,15,3
	.word	85321
	.byte	12,23,180,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75197
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,23,185,15,3
	.word	85384
	.byte	12,23,188,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75780
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,23,193,15,3
	.word	85460
	.byte	12,23,196,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76373
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,23,201,15,3
	.word	85536
	.byte	12,23,204,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76491
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,23,209,15,3
	.word	85600
	.byte	12,23,212,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77080
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,23,217,15,3
	.word	85679
	.byte	12,23,220,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77679
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,23,225,15,3
	.word	85758
	.byte	12,23,228,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77833
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,23,233,15,3
	.word	85821
	.byte	12,23,236,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78132
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,23,241,15,3
	.word	85885
	.byte	12,23,244,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78230
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,23,249,15,3
	.word	85951
	.byte	12,23,252,15,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78402
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,23,129,16,3
	.word	86016
	.byte	12,23,132,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78531
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,23,137,16,3
	.word	86092
	.byte	12,23,140,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78661
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,23,145,16,3
	.word	86170
	.byte	12,23,148,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78813
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,23,153,16,3
	.word	86248
	.byte	12,23,156,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78940
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,23,161,16,3
	.word	86325
	.byte	12,23,164,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79089
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,23,169,16,3
	.word	86402
	.byte	12,23,172,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79203
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,23,177,16,3
	.word	86473
	.byte	12,23,180,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79447
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,23,185,16,3
	.word	86545
	.byte	12,23,188,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79527
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,23,193,16,3
	.word	86612
	.byte	12,23,196,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79722
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,23,201,16,3
	.word	86678
	.byte	12,23,204,16,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79795
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,23,209,16,3
	.word	86742
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,23,221,16,25,16,13
	.byte	'LA',0
	.word	85193
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	85257
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	85057
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	85125
	.byte	4,2,35,12,0,14
	.word	86806
	.byte	32
	.byte	'Ifx_CPU_RGN',0,23,227,16,3
	.word	86882
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,23,242,16,25,12,13
	.byte	'RABR',0
	.word	80366
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	80300
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	80233
	.byte	4,2,35,8,0,14
	.word	86908
	.byte	32
	.byte	'Ifx_CPU_BLK',0,23,247,16,3
	.word	86971
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,23,134,17,25,28,13
	.byte	'CON',0
	.word	83050
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	83190
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	83120
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3722
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	83259
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	83330
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	83401
	.byte	4,2,35,24,0,14
	.word	86997
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,23,143,17,3
	.word	87122
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,23,158,17,25,8,13
	.byte	'L',0
	.word	82341
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	82404
	.byte	4,2,35,4,0,14
	.word	87153
	.byte	32
	.byte	'Ifx_CPU_DPR',0,23,162,17,3
	.word	87195
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,23,177,17,25,8,13
	.byte	'L',0
	.word	80747
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	80810
	.byte	4,2,35,4,0,14
	.word	87221
	.byte	32
	.byte	'Ifx_CPU_CPR',0,23,181,17,3
	.word	87263
	.byte	18,12
	.word	86545
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,23,196,17,25,16,13
	.byte	'CON',0
	.word	85951
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	87289
	.byte	12,2,35,4,0,14
	.word	87298
	.byte	32
	.byte	'Ifx_CPU_TPS',0,23,200,17,3
	.word	87346
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,23,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	86170
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	86092
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	86325
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	86248
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	86016
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	86473
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	86402
	.byte	4,2,35,24,0,14
	.word	87372
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,23,224,17,3
	.word	87521
	.byte	10
	.byte	'_Ifx_CPU_TR',0,23,239,17,25,8,13
	.byte	'EVT',0
	.word	86742
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	86678
	.byte	4,2,35,4,0,14
	.word	87553
	.byte	32
	.byte	'Ifx_CPU_TR',0,23,243,17,3
	.word	87598
	.byte	18,128,34
	.word	596
	.byte	19,255,33,0,18,236,253,2
	.word	596
	.byte	19,235,253,2,0,18,244,31
	.word	596
	.byte	19,243,31,0,18,128,1
	.word	86806
	.byte	19,7,0,14
	.word	87658
	.byte	18,232,1
	.word	596
	.byte	19,231,1,0,18,128,48
	.word	596
	.byte	19,255,47,0,18,128,3
	.word	86908
	.byte	19,31,0,14
	.word	87695
	.byte	18,160,39
	.word	596
	.byte	19,159,39,0,18,208,223,1
	.word	596
	.byte	19,207,223,1,0,18,248,1
	.word	596
	.byte	19,247,1,0,18,244,29
	.word	596
	.byte	19,243,29,0,18,188,3
	.word	596
	.byte	19,187,3,0,18,232,3
	.word	596
	.byte	19,231,3,0,18,252,23
	.word	596
	.byte	19,251,23,0,14
	.word	86997
	.byte	18,228,63
	.word	596
	.byte	19,227,63,0,18,144,1
	.word	87153
	.byte	19,17,0,14
	.word	87805
	.byte	18,240,30
	.word	596
	.byte	19,239,30,0,18,80
	.word	87221
	.byte	19,9,0,14
	.word	87831
	.byte	18,176,31
	.word	596
	.byte	19,175,31,0,18,152,7
	.word	596
	.byte	19,151,7,0,14
	.word	87298
	.byte	18,48
	.word	596
	.byte	19,47,0,14
	.word	87372
	.byte	18,164,23
	.word	596
	.byte	19,163,23,0,18,64
	.word	87553
	.byte	19,7,0,14
	.word	87897
	.byte	18,192,23
	.word	596
	.byte	19,191,23,0,18,180,1
	.word	596
	.byte	19,179,1,0,18,172,1
	.word	596
	.byte	19,171,1,0,18,64
	.word	81126
	.byte	19,15,0,18,64
	.word	596
	.byte	19,63,0,18,64
	.word	80113
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,23,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	87623
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	82715
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	82782
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	82849
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	82916
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	82983
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	87634
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	83656
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	83719
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	83782
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	87647
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	87668
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	5542
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	85600
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	85679
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	5542
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	85600
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	85679
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	5542
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	85600
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	85679
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	5542
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	85600
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	85679
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	5542
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	85600
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	85679
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	5542
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	85600
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	85679
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	5542
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	85600
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	85679
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	5542
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	85600
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	85679
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	85384
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	85460
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	5542
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	83908
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	83984
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	87673
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	82070
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	82144
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	81830
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	81990
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	82070
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	82144
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	81830
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	81990
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	82070
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	82144
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	81830
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	81990
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	82070
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	82144
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	81830
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	81990
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	82070
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	82144
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	81830
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	81990
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	82070
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	82144
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	81830
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	81990
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	82070
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	82144
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	81830
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	81990
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	82070
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	82144
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	81830
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	81990
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	5542
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	81750
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	81910
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	5542
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	81750
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	81910
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	5542
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	81750
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	81910
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	5542
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	81750
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	81910
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	5542
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	81750
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	81910
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	5542
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	81750
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	81910
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	5542
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	81750
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	81910
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	5542
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	81750
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	81910
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	87684
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	84249
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5882
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	87705
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	87710
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	85321
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	87721
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	85885
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	87734
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	84748
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	84810
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	84872
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	87745
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	81437
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	5542
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	85536
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	82529
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3722
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	81185
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	81561
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	81624
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	81687
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4913
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	81374
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	87756
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	84934
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	84434
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	84497
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	84371
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	84622
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	84685
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	87767
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	80618
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	87778
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	87789
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	87794
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	87815
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	87820
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	87840
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	87845
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	80937
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	80937
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	80937
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	80937
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	82279
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	82279
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	82279
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	82279
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	82467
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	82467
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	82467
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	82467
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	53227
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	80937
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	80937
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	5542
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	82279
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	82279
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	5542
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	82467
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	82467
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	87856
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	87867
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	87872
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	87881
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	87886
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	87906
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	87911
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	80555
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	80493
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	83472
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	84060
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	84123
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	84186
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	87673
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	81247
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3722
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	82591
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	80999
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	85758
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	17212
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	86612
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5882
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	82218
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	81500
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	81310
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	87922
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	84560
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	84996
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	84311
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	5542
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	85821
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	80873
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	80682
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	80172
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	80432
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	83595
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	83534
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	5542
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	82654
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	83847
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	53227
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	81062
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	87933
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	87944
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	87953
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	87962
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	87953
	.byte	64,4,35,192,255,7,0,14
	.word	87971
	.byte	32
	.byte	'Ifx_CPU',0,23,210,19,3
	.word	93069
	.byte	15,9,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,32
	.byte	'IfxCpu_Id',0,9,133,1,3
	.word	93091
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,9,170,1,3
	.word	2237
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,24,102,3
	.word	93245
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,24,108,3
	.word	93802
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,24,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,24,114,3
	.word	93879
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,24,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,24,120,3
	.word	93952
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,24,123,16,4,11
	.byte	'DISR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,24,130,1,3
	.word	94029
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,24,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	596
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	596
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	596
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	596
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	596
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	596
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	596
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	596
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,24,143,1,3
	.word	94171
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,24,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,24,149,1,3
	.word	94391
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,24,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	421
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,24,162,1,3
	.word	94460
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,24,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,24,170,1,3
	.word	94663
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,24,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,24,180,1,3
	.word	94767
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,24,183,1,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,24,188,1,3
	.word	94918
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,24,191,1,16,4,11
	.byte	'RST',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,24,195,1,3
	.word	95029
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,24,198,1,16,4,11
	.byte	'CLR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	421
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,24,202,1,3
	.word	95121
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,24,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	596
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	421
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,24,213,1,3
	.word	95217
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,24,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,24,219,1,3
	.word	95385
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,24,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,24,225,1,3
	.word	95458
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,24,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,24,231,1,3
	.word	95535
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,24,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,24,237,1,3
	.word	95608
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,24,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,24,243,1,3
	.word	95681
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,24,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,24,249,1,3
	.word	95755
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,24,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,24,255,1,3
	.word	95829
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,24,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,24,133,2,3
	.word	95903
	.byte	12,24,141,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93245
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,24,146,2,3
	.word	95977
	.byte	12,24,149,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93802
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,24,154,2,3
	.word	96041
	.byte	12,24,157,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,24,162,2,3
	.word	96105
	.byte	12,24,165,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93952
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,24,170,2,3
	.word	96166
	.byte	12,24,173,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94029
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,24,178,2,3
	.word	96229
	.byte	12,24,181,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94171
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,24,186,2,3
	.word	96290
	.byte	12,24,189,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94391
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,24,194,2,3
	.word	96353
	.byte	12,24,197,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94460
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,24,202,2,3
	.word	96414
	.byte	12,24,205,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94663
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,24,210,2,3
	.word	96475
	.byte	12,24,213,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94767
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,24,218,2,3
	.word	96535
	.byte	12,24,221,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94918
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,24,226,2,3
	.word	96597
	.byte	12,24,229,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95029
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,24,234,2,3
	.word	96660
	.byte	12,24,237,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95121
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,24,242,2,3
	.word	96723
	.byte	12,24,245,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95217
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,24,250,2,3
	.word	96788
	.byte	12,24,253,2,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,24,130,3,3
	.word	96849
	.byte	12,24,133,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95458
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,24,138,3,3
	.word	96911
	.byte	12,24,141,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95535
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,24,146,3,3
	.word	96975
	.byte	12,24,149,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95608
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,24,154,3,3
	.word	97037
	.byte	12,24,157,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95681
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,24,162,3,3
	.word	97099
	.byte	12,24,165,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95755
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,24,170,3,3
	.word	97161
	.byte	12,24,173,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95829
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,24,178,3,3
	.word	97223
	.byte	12,24,181,3,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95903
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,24,186,3,3
	.word	97285
	.byte	15,8,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	97347
	.byte	20,8,198,1,9,6,13
	.byte	'counter',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	596
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	97436
	.byte	20,8,210,1,9,32,13
	.byte	'instruction',0
	.word	97436
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	97436
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	97436
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	97436
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	97436
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	97502
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,11,102,3
	.word	9070
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,11,108,3
	.word	8983
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,11,130,1,3
	.word	5551
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,11,138,1,3
	.word	3602
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,11,160,1,3
	.word	4598
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,11,173,1,3
	.word	3731
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,11,186,1,3
	.word	4378
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,11,199,1,3
	.word	3946
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,11,212,1,3
	.word	4161
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,11,231,1,3
	.word	8645
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,11,253,1,3
	.word	8297
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,11,136,2,3
	.word	7284
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,11,146,2,3
	.word	7808
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,11,157,2,3
	.word	7458
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,11,168,2,3
	.word	7632
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,11,205,2,3
	.word	3031
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,11,227,2,3
	.word	7964
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,11,237,2,3
	.word	6621
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,11,248,2,3
	.word	7109
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,11,131,3,3
	.word	6768
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,11,142,3,3
	.word	6937
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,11,164,3,3
	.word	2715
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,11,187,3,3
	.word	6257
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,11,209,3,3
	.word	5891
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,11,230,3,3
	.word	4922
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,11,251,3,3
	.word	5226
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,11,136,4,3
	.word	9597
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,11,144,4,3
	.word	9030
	.byte	32
	.byte	'Ifx_P_ESR',0,11,152,4,3
	.word	5842
	.byte	32
	.byte	'Ifx_P_ID',0,11,160,4,3
	.word	3682
	.byte	32
	.byte	'Ifx_P_IN',0,11,168,4,3
	.word	4873
	.byte	32
	.byte	'Ifx_P_IOCR0',0,11,176,4,3
	.word	3906
	.byte	32
	.byte	'Ifx_P_IOCR12',0,11,184,4,3
	.word	4558
	.byte	32
	.byte	'Ifx_P_IOCR4',0,11,192,4,3
	.word	4121
	.byte	32
	.byte	'Ifx_P_IOCR8',0,11,200,4,3
	.word	4338
	.byte	32
	.byte	'Ifx_P_LPCR',0,11,208,4,3
	.word	8925
	.byte	32
	.byte	'Ifx_P_OMCR',0,11,216,4,3
	.word	8605
	.byte	32
	.byte	'Ifx_P_OMCR0',0,11,224,4,3
	.word	7418
	.byte	32
	.byte	'Ifx_P_OMCR12',0,11,232,4,3
	.word	7924
	.byte	32
	.byte	'Ifx_P_OMCR4',0,11,240,4,3
	.word	7592
	.byte	32
	.byte	'Ifx_P_OMCR8',0,11,248,4,3
	.word	7768
	.byte	32
	.byte	'Ifx_P_OMR',0,11,128,5,3
	.word	3562
	.byte	32
	.byte	'Ifx_P_OMSR',0,11,136,5,3
	.word	8257
	.byte	32
	.byte	'Ifx_P_OMSR0',0,11,144,5,3
	.word	6728
	.byte	32
	.byte	'Ifx_P_OMSR12',0,11,152,5,3
	.word	7244
	.byte	32
	.byte	'Ifx_P_OMSR4',0,11,160,5,3
	.word	6897
	.byte	32
	.byte	'Ifx_P_OMSR8',0,11,168,5,3
	.word	7069
	.byte	32
	.byte	'Ifx_P_OUT',0,11,176,5,3
	.word	2991
	.byte	32
	.byte	'Ifx_P_PCSR',0,11,184,5,3
	.word	6581
	.byte	32
	.byte	'Ifx_P_PDISC',0,11,192,5,3
	.word	6217
	.byte	32
	.byte	'Ifx_P_PDR0',0,11,200,5,3
	.word	5186
	.byte	32
	.byte	'Ifx_P_PDR1',0,11,208,5,3
	.word	5502
	.byte	14
	.word	9637
	.byte	32
	.byte	'Ifx_P',0,11,128,6,3
	.word	98814
	.byte	15,10,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,10,77,3
	.word	98834
	.byte	32
	.byte	'IfxPort_InputMode',0,10,87,3
	.word	10217
	.byte	15,10,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,10,95,3
	.word	98951
	.byte	32
	.byte	'IfxPort_Mode',0,10,122,3
	.word	20344
	.byte	32
	.byte	'IfxPort_OutputIdx',0,10,136,1,3
	.word	10518
	.byte	32
	.byte	'IfxPort_OutputMode',0,10,145,1,3
	.word	10422
	.byte	32
	.byte	'IfxPort_PadDriver',0,10,165,1,3
	.word	19031
	.byte	15,10,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,10,173,1,3
	.word	99135
	.byte	15,10,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,10,181,1,3
	.word	99215
	.byte	32
	.byte	'IfxPort_State',0,10,193,1,3
	.word	10831
	.byte	32
	.byte	'IfxPort_Pin',0,10,250,1,3
	.word	18794
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,25,68,16,4,11
	.byte	'EN0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,25,102,3
	.word	99366
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,25,105,16,4,11
	.byte	'reserved_0',0,4
	.word	421
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,25,108,3
	.word	99923
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,25,111,16,4,11
	.byte	'DF0',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	596
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	596
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	596
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	596
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,25,145,1,3
	.word	100000
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,25,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	596
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	596
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	596
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	596
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	596
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	596
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	596
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	596
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	596
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	596
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	596
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	596
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	596
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	596
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	596
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	596
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	596
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	596
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	596
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	596
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	596
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	596
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,25,176,1,3
	.word	100550
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,25,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,25,207,1,3
	.word	101107
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,25,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	596
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	613
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	613
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	596
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	596
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,25,217,1,3
	.word	101703
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,25,220,1,16,4,11
	.byte	'SF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,25,254,1,3
	.word	101843
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,25,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	444
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	444
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	444
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	444
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,25,142,2,3
	.word	102394
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,25,145,2,16,4,11
	.byte	'CF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,25,179,2,3
	.word	102656
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,25,182,2,16,4,11
	.byte	'FE0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,25,216,2,3
	.word	103211
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,25,219,2,16,4,11
	.byte	'DISR',0,1
	.word	596
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	596
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,25,226,2,3
	.word	103768
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,25,229,2,16,4,11
	.byte	'CMD',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,25,234,2,3
	.word	103911
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,25,237,2,16,4,11
	.byte	'SSM',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	421
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,25,241,2,3
	.word	104014
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,25,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	444
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	444
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	444
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	444
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	444
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,25,252,2,3
	.word	104102
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,25,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	596
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	596
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	613
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,25,132,3,3
	.word	104257
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,25,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	444
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	444
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,25,140,3,3
	.word	104367
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,25,143,3,16,4,11
	.byte	'TGS',0,1
	.word	596
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	596
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	596
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	421
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	596
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	596
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	596
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	596
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,25,153,3,3
	.word	104479
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,25,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	444
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	444
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,25,167,3,3
	.word	104671
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,25,170,3,16,4,11
	.byte	'TE0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,25,204,3,3
	.word	104902
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,25,207,3,16,4,11
	.byte	'EF0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,25,241,3,3
	.word	105606
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,25,244,3,16,4,11
	.byte	'STS0',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	444
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	444
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	444
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	444
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	444
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	444
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	444
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	444
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	444
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	444
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	444
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	444
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	444
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	444
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	444
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	444
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	444
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,25,150,4,3
	.word	106308
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,25,153,4,16,4,11
	.byte	'GID0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,25,161,4,3
	.word	107023
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,25,164,4,16,4,11
	.byte	'GID2',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,25,172,4,3
	.word	107191
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,25,175,4,16,4,11
	.byte	'GID0',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,25,183,4,3
	.word	107359
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,25,186,4,16,4,11
	.byte	'GID2',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	444
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	444
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	444
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	444
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,25,194,4,3
	.word	107527
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,25,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	444
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	444
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	444
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,25,203,4,3
	.word	107695
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,25,206,4,16,4,11
	.byte	'CMD',0,4
	.word	444
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	444
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	444
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	444
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	444
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	444
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	444
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	444
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	444
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	444
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	444
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,25,220,4,3
	.word	107815
	.byte	12,25,228,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99366
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,25,233,4,3
	.word	108070
	.byte	12,25,236,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99923
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,25,241,4,3
	.word	108134
	.byte	12,25,244,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100000
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,25,249,4,3
	.word	108198
	.byte	12,25,252,4,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100550
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,25,129,5,3
	.word	108258
	.byte	12,25,132,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101107
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,25,137,5,3
	.word	108319
	.byte	12,25,140,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101703
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,25,145,5,3
	.word	108383
	.byte	12,25,148,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101843
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,25,153,5,3
	.word	108446
	.byte	12,25,156,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102394
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,25,161,5,3
	.word	108506
	.byte	12,25,164,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102656
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,25,169,5,3
	.word	108567
	.byte	12,25,172,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103211
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,25,177,5,3
	.word	108629
	.byte	12,25,180,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103768
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,25,185,5,3
	.word	108692
	.byte	12,25,188,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103911
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,25,193,5,3
	.word	108753
	.byte	12,25,196,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104014
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,25,201,5,3
	.word	108814
	.byte	12,25,204,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104102
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,25,209,5,3
	.word	108875
	.byte	12,25,212,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104257
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,25,217,5,3
	.word	108936
	.byte	12,25,220,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104367
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,25,225,5,3
	.word	108996
	.byte	12,25,228,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104479
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,25,233,5,3
	.word	109058
	.byte	12,25,236,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104671
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,25,241,5,3
	.word	109119
	.byte	12,25,244,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104902
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,25,249,5,3
	.word	109181
	.byte	12,25,252,5,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105606
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,25,129,6,3
	.word	109244
	.byte	12,25,132,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106308
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,25,137,6,3
	.word	109306
	.byte	12,25,140,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107023
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,25,145,6,3
	.word	109369
	.byte	12,25,148,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107191
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,25,153,6,3
	.word	109433
	.byte	12,25,156,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107359
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,25,161,6,3
	.word	109497
	.byte	12,25,164,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107527
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,25,169,6,3
	.word	109561
	.byte	12,25,172,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107695
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,25,177,6,3
	.word	109625
	.byte	12,25,180,6,9,4,13
	.byte	'U',0
	.word	421
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	437
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107815
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,25,185,6,3
	.word	109686
	.byte	15,12,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,12,216,2,3
	.word	109747
	.byte	15,12,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,12,229,2,3
	.word	109940
	.byte	15,12,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,12,131,4,3
	.word	110241
	.byte	15,12,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,12,141,4,3
	.word	110415
	.byte	15,12,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,12,151,4,3
	.word	110569
	.byte	20,12,162,4,9,6,13
	.byte	'pDivider',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	596
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	596
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	596
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,12,171,4,3
	.word	110654
	.byte	20,12,176,4,9,4,13
	.byte	'pDivider',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	596
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	596
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,12,181,4,3
	.word	110792
	.byte	20,12,189,4,9,8,13
	.byte	'value',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2484
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,12,193,4,3
	.word	110886
	.byte	20,12,197,4,9,6,13
	.byte	'k2Step',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	217
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,12,201,4,3
	.word	110957
	.byte	20,12,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	110241
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	110792
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	110654
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,12,211,4,3
	.word	111031
	.byte	20,12,219,4,9,8,13
	.byte	'value',0
	.word	2484
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2484
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,12,223,4,3
	.word	111176
	.byte	20,12,231,4,9,80,13
	.byte	'ccucon0',0
	.word	110886
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	110886
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	110886
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	110886
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	110886
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	110886
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	110886
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	110886
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	110886
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	110886
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,12,243,4,3
	.word	111252
	.byte	20,12,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	111031
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	217
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,12,251,4,3
	.word	111474
	.byte	21
	.word	110957
	.byte	3
	.word	111560
	.byte	20,12,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	596
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	111565
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,12,131,5,3
	.word	111570
	.byte	20,12,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	110569
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	109940
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,12,141,5,3
	.word	111652
	.byte	32
	.byte	'Ifx_SENT_ACCEN0_Bits',0,14,102,3
	.word	13017
	.byte	32
	.byte	'Ifx_SENT_ACCEN1_Bits',0,14,108,3
	.word	12927
	.byte	32
	.byte	'Ifx_SENT_CH_CFDR_Bits',0,14,115,3
	.word	13695
	.byte	32
	.byte	'Ifx_SENT_CH_CPDR_Bits',0,14,122,3
	.word	13587
	.byte	32
	.byte	'Ifx_SENT_CH_INP_Bits',0,14,135,1,3
	.word	16561
	.byte	32
	.byte	'Ifx_SENT_CH_INTCLR_Bits',0,14,155,1,3
	.word	15948
	.byte	32
	.byte	'Ifx_SENT_CH_INTEN_Bits',0,14,175,1,3
	.word	16255
	.byte	32
	.byte	'Ifx_SENT_CH_INTSET_Bits',0,14,195,1,3
	.word	15641
	.byte	32
	.byte	'Ifx_SENT_CH_INTSTAT_Bits',0,14,215,1,3
	.word	15333
	.byte	32
	.byte	'Ifx_SENT_CH_IOCR_Bits',0,14,237,1,3
	.word	14431
	.byte	32
	.byte	'Ifx_SENT_CH_RCR_Bits',0,14,129,2,3
	.word	13795
	.byte	32
	.byte	'Ifx_SENT_CH_RSR_Bits',0,14,140,2,3
	.word	14103
	.byte	32
	.byte	'Ifx_SENT_CH_SCR_Bits',0,14,151,2,3
	.word	14775
	.byte	32
	.byte	'Ifx_SENT_CH_SDS_Bits',0,14,161,2,3
	.word	14279
	.byte	32
	.byte	'Ifx_SENT_CH_VIEW_Bits',0,14,182,2,3
	.word	14945
	.byte	32
	.byte	'Ifx_SENT_CH_WDT_Bits',0,14,189,2,3
	.word	16750
	.byte	32
	.byte	'Ifx_SENT_CLC_Bits',0,14,199,2,3
	.word	11096
	.byte	32
	.byte	'Ifx_SENT_FDR_Bits',0,14,209,2,3
	.word	11374
	.byte	32
	.byte	'Ifx_SENT_ID_Bits',0,14,217,2,3
	.word	11254
	.byte	32
	.byte	'Ifx_SENT_INTOV_Bits',0,14,248,2,3
	.word	11534
	.byte	32
	.byte	'Ifx_SENT_KRST0_Bits',0,14,128,3,3
	.word	12803
	.byte	32
	.byte	'Ifx_SENT_KRST1_Bits',0,14,135,3,3
	.word	12698
	.byte	32
	.byte	'Ifx_SENT_KRSTCLR_Bits',0,14,142,3,3
	.word	12591
	.byte	32
	.byte	'Ifx_SENT_OCS_Bits',0,14,152,3,3
	.word	12430
	.byte	32
	.byte	'Ifx_SENT_RDR_Bits',0,14,165,3,3
	.word	12235
	.byte	32
	.byte	'Ifx_SENT_RTS_Bits',0,14,171,3,3
	.word	17122
	.byte	32
	.byte	'Ifx_SENT_TPD_Bits',0,14,178,3,3
	.word	12121
	.byte	32
	.byte	'Ifx_SENT_TSR_Bits',0,14,184,3,3
	.word	12040
	.byte	32
	.byte	'Ifx_SENT_ACCEN0',0,14,197,3,3
	.word	13547
	.byte	32
	.byte	'Ifx_SENT_ACCEN1',0,14,205,3,3
	.word	12977
	.byte	32
	.byte	'Ifx_SENT_CH_CFDR',0,14,213,3,3
	.word	13755
	.byte	32
	.byte	'Ifx_SENT_CH_CPDR',0,14,221,3,3
	.word	13655
	.byte	32
	.byte	'Ifx_SENT_CH_INP',0,14,229,3,3
	.word	16710
	.byte	32
	.byte	'Ifx_SENT_CH_INTCLR',0,14,237,3,3
	.word	16215
	.byte	32
	.byte	'Ifx_SENT_CH_INTEN',0,14,245,3,3
	.word	16521
	.byte	32
	.byte	'Ifx_SENT_CH_INTSET',0,14,253,3,3
	.word	15908
	.byte	32
	.byte	'Ifx_SENT_CH_INTSTAT',0,14,133,4,3
	.word	15601
	.byte	32
	.byte	'Ifx_SENT_CH_IOCR',0,14,141,4,3
	.word	14735
	.byte	32
	.byte	'Ifx_SENT_CH_RCR',0,14,149,4,3
	.word	14063
	.byte	32
	.byte	'Ifx_SENT_CH_RSR',0,14,157,4,3
	.word	14239
	.byte	32
	.byte	'Ifx_SENT_CH_SCR',0,14,165,4,3
	.word	14905
	.byte	32
	.byte	'Ifx_SENT_CH_SDS',0,14,173,4,3
	.word	14391
	.byte	32
	.byte	'Ifx_SENT_CH_VIEW',0,14,181,4,3
	.word	15293
	.byte	32
	.byte	'Ifx_SENT_CH_WDT',0,14,189,4,3
	.word	16817
	.byte	32
	.byte	'Ifx_SENT_CLC',0,14,197,4,3
	.word	11214
	.byte	32
	.byte	'Ifx_SENT_FDR',0,14,205,4,3
	.word	11494
	.byte	32
	.byte	'Ifx_SENT_ID',0,14,213,4,3
	.word	11334
	.byte	32
	.byte	'Ifx_SENT_INTOV',0,14,221,4,3
	.word	12000
	.byte	32
	.byte	'Ifx_SENT_KRST0',0,14,229,4,3
	.word	12887
	.byte	32
	.byte	'Ifx_SENT_KRST1',0,14,237,4,3
	.word	12763
	.byte	32
	.byte	'Ifx_SENT_KRSTCLR',0,14,245,4,3
	.word	12658
	.byte	32
	.byte	'Ifx_SENT_OCS',0,14,253,4,3
	.word	12551
	.byte	32
	.byte	'Ifx_SENT_RDR',0,14,133,5,3
	.word	12381
	.byte	32
	.byte	'Ifx_SENT_RTS',0,14,141,5,3
	.word	17163
	.byte	32
	.byte	'Ifx_SENT_TPD',0,14,149,5,3
	.word	12186
	.byte	32
	.byte	'Ifx_SENT_TSR',0,14,157,5,3
	.word	12081
	.byte	14
	.word	16857
	.byte	32
	.byte	'Ifx_SENT_CH',0,14,186,5,3
	.word	113240
	.byte	14
	.word	17221
	.byte	32
	.byte	'Ifx_SENT',0,14,224,5,3
	.word	113266
	.byte	21
	.word	18951
	.byte	32
	.byte	'IfxSent_Sent_In',0,16,62,3
	.word	113289
	.byte	21
	.word	19541
	.byte	32
	.byte	'IfxSent_Spc_Out',0,16,71,3
	.word	113318
	.byte	32
	.byte	'IfxSent_AlternateInput',0,13,93,3
	.word	18195
	.byte	32
	.byte	'IfxSent_ClockDividerMode',0,13,112,3
	.word	21455
	.byte	32
	.byte	'IfxSent_ConfigBit',0,13,120,3
	.word	26371
	.byte	32
	.byte	'IfxSent_DigitalGlitchesLength',0,13,142,1,3
	.word	21995
	.byte	32
	.byte	'IfxSent_ExtendedSerialFrameMode',0,13,150,1,3
	.word	23350
	.byte	32
	.byte	'IfxSent_ExternalTrigger',0,13,172,1,3
	.word	22553
	.byte	32
	.byte	'IfxSent_FrameCheckMode',0,13,180,1,3
	.word	23263
	.byte	32
	.byte	'IfxSent_InterruptNodePointer',0,13,196,1,3
	.word	24254
	.byte	32
	.byte	'IfxSent_Nibble',0,13,210,1,3
	.word	25042
	.byte	15,13,215,1,9,1,16
	.byte	'IfxSent_SleepMode_enable',0,0,16
	.byte	'IfxSent_SleepMode_disable',0,1,0,32
	.byte	'IfxSent_SleepMode',0,13,219,1,3
	.word	113644
	.byte	32
	.byte	'IfxSent_SpcMode',0,13,228,1,3
	.word	24056
	.byte	15,13,232,1,9,1,16
	.byte	'IfxSent_SuspendMode_none',0,0,16
	.byte	'IfxSent_SuspendMode_hard',0,1,16
	.byte	'IfxSent_SuspendMode_soft',0,2,0,32
	.byte	'IfxSent_SuspendMode',0,13,237,1,3
	.word	113758
	.byte	32
	.byte	'IfxSent_TimeBase',0,13,245,1,3
	.word	23976
	.byte	32
	.byte	'IfxSent_TriggerSource',0,13,255,1,3
	.word	23831
	.byte	15,13,133,2,9,1,16
	.byte	'IfxSent_InterruptSource_rsi',0,0,16
	.byte	'IfxSent_InterruptSource_rdi',0,1,16
	.byte	'IfxSent_InterruptSource_rbi',0,2,16
	.byte	'IfxSent_InterruptSource_tdi',0,3,16
	.byte	'IfxSent_InterruptSource_tbi',0,4,16
	.byte	'IfxSent_InterruptSource_fri',0,5,16
	.byte	'IfxSent_InterruptSource_fdi',0,6,16
	.byte	'IfxSent_InterruptSource_nni',0,7,16
	.byte	'IfxSent_InterruptSource_nvi',0,8,16
	.byte	'IfxSent_InterruptSource_crci',0,9,16
	.byte	'IfxSent_InterruptSource_wsi',0,10,16
	.byte	'IfxSent_InterruptSource_sdi',0,11,16
	.byte	'IfxSent_InterruptSource_scri',0,12,16
	.byte	'IfxSent_InterruptSource_wdi',0,13,0,32
	.byte	'IfxSent_InterruptSource',0,13,149,2,3
	.word	113932
	.byte	32
	.byte	'IfxSent_Sent_Enable',0,18,156,3,3
	.word	25446
	.byte	32
	.byte	'IfxSent_Sent',0,18,167,3,3
	.word	21802
	.byte	32
	.byte	'IfxSent_Sent_EnabledInterrupts',0,18,175,3,3
	.word	25960
	.byte	32
	.byte	'IfxSent_Sent_InputOutputControl',0,18,189,3,3
	.word	23014
	.byte	32
	.byte	'IfxSent_Sent_Interrupt',0,18,197,3,3
	.word	25400
	.byte	32
	.byte	'IfxSent_Sent_InterruptNodeControl',0,18,211,3,3
	.word	24641
	.byte	32
	.byte	'IfxSent_Sent_NibbleControl',0,18,225,3,3
	.word	25201
	.byte	32
	.byte	'IfxSent_Sent_Pins',0,18,236,3,3
	.word	24948
	.byte	32
	.byte	'IfxSent_Sent_ReceiveControl',0,18,255,3,3
	.word	23443
	.byte	32
	.byte	'IfxSent_Sent_TransmitControl',0,18,138,4,3
	.word	24142
	.byte	32
	.byte	'IfxSent_Sent_Channel',0,18,151,4,3
	.word	21931
	.byte	32
	.byte	'IfxSent_Sent_ChannelConfig',0,18,170,4,3
	.word	25996
	.byte	32
	.byte	'IfxSent_Sent_Config',0,18,179,4,3
	.word	21828
	.byte	32
	.byte	'IfxSent_Sent_Frame',0,18,188,4,3
	.word	26304
	.byte	32
	.byte	'IfxSent_Sent_SerialMessageFrame',0,18,198,4,3
	.word	26421
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L41:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,29,1,49,19,0,0,31,11
	.byte	0,49,19,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L42:
	.word	.L317-.L316
.L316:
	.half	3
	.word	.L319-.L318
.L318:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxSrc.h',0,4,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxPort.h',0,6,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxSent.h',0,7,0,0
	.byte	'IfxSent_regdef.h',0,3,0,0
	.byte	'IfxSent_cfg.h',0,5,0,0
	.byte	'IfxSent_PinMap.h',0,8,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L319:
.L317:
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_info'
.L43:
	.word	277
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L46,.L45
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_deInitModule',0,1,55,6,1,1,1
	.word	.L24,.L83,.L23
	.byte	4
	.byte	'driver',0,1,55,46
	.word	.L84,.L85
	.byte	5
	.word	.L24,.L83
	.byte	6
	.byte	'sentSFR',0,1,57,15
	.word	.L86,.L87
	.byte	6
	.byte	'passwd',0,1,58,15
	.word	.L88,.L89
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_line'
.L45:
	.word	.L321-.L320
.L320:
	.half	3
	.word	.L323-.L322
.L322:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0,0
.L323:
	.byte	5,31,7,0,5,2
	.word	.L24
	.byte	3,56,1,5,57,9
	.half	.L268-.L24
	.byte	3,1,1,5,23,9
	.half	.L267-.L268
	.byte	1,5,31,9
	.half	.L270-.L267
	.byte	3,1,1,5,25,9
	.half	.L269-.L270
	.byte	3,1,1,5,29,9
	.half	.L272-.L269
	.byte	3,1,1,5,1,9
	.half	.L47-.L272
	.byte	3,1,0,1,1
.L321:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_ranges'
.L46:
	.word	-1,.L24,0,.L47-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_info'
.L48:
	.word	415
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_initModule',0,1,157,2,9
	.word	.L90
	.byte	1,1,1
	.word	.L32,.L91,.L31
	.byte	4
	.byte	'driver',0,1,157,2,47
	.word	.L84,.L92
	.byte	4
	.byte	'config',0,1,157,2,82
	.word	.L93,.L94
	.byte	5
	.word	.L32,.L91
	.byte	6
	.byte	'sentSFR',0,1,160,2,15
	.word	.L86,.L95
	.byte	5
	.word	.L96,.L91
	.byte	6
	.byte	'passwd',0,1,163,2,15
	.word	.L88,.L97
	.byte	7
	.word	.L98,.L99,.L19
	.byte	8
	.word	.L100,.L101
	.byte	9
	.word	.L102,.L99,.L19
	.byte	6
	.byte	'passwd',0,2,228,4,12
	.word	.L88,.L103
	.byte	0,0,7
	.word	.L104,.L105,.L106
	.byte	8
	.word	.L107,.L108
	.byte	8
	.word	.L109,.L110
	.byte	10
	.word	.L111,.L105,.L106
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_line'
.L50:
	.word	.L325-.L324
.L324:
	.half	3
	.word	.L327-.L326
.L326:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0
	.byte	'IfxSent.h',0,1,0,0,0
.L327:
	.byte	5,9,7,0,5,2
	.word	.L32
	.byte	3,156,2,1,5,31,9
	.half	.L302-.L32
	.byte	3,3,1,5,18,9
	.half	.L303-.L302
	.byte	3,1,1,5,56,9
	.half	.L96-.L303
	.byte	3,2,1,5,22,9
	.half	.L301-.L96
	.byte	1,4,2,5,23,3,193,3,1,4,1,5,5,9
	.half	.L305-.L301
	.byte	3,193,124,1,4,2,5,53,7,9
	.half	.L99-.L305
	.byte	3,191,2,1,5,19,9
	.half	.L304-.L99
	.byte	1,5,31,9
	.half	.L307-.L304
	.byte	3,1,1,5,16,9
	.half	.L306-.L307
	.byte	3,1,1,5,22,9
	.half	.L328-.L306
	.byte	1,5,29,9
	.half	.L329-.L328
	.byte	3,1,1,5,18,9
	.half	.L330-.L329
	.byte	3,2,1,4,1,5,31,9
	.half	.L19-.L330
	.byte	3,193,125,1,5,34,9
	.half	.L331-.L19
	.byte	3,1,1,5,19,9
	.half	.L332-.L331
	.byte	1,5,34,9
	.half	.L333-.L332
	.byte	1,5,77,3,2,1,5,25,9
	.half	.L308-.L333
	.byte	3,126,1,5,44,9
	.half	.L334-.L308
	.byte	3,2,1,5,77,9
	.half	.L335-.L334
	.byte	1,5,51,9
	.half	.L309-.L335
	.byte	3,1,1,4,2,5,16,9
	.half	.L105-.L309
	.byte	3,170,3,1,5,22,9
	.half	.L336-.L105
	.byte	1,4,1,5,29,9
	.half	.L106-.L336
	.byte	3,216,124,1,5,12,9
	.half	.L337-.L106
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L52-.L337
	.byte	0,1,1
.L325:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L32,0,.L52-.L32,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_info'
.L53:
	.word	261
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L56,.L55
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_initModuleConfig',0,1,182,2,6,1,1,1
	.word	.L34,.L112,.L33
	.byte	4
	.byte	'config',0,1,182,2,57
	.word	.L113,.L114
	.byte	4
	.byte	'sent',0,1,182,2,75
	.word	.L86,.L115
	.byte	5
	.word	.L34,.L112
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_line'
.L55:
	.word	.L339-.L338
.L338:
	.half	3
	.word	.L341-.L340
.L340:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0,0
.L341:
	.byte	5,32,7,0,5,2
	.word	.L34
	.byte	3,186,2,1,5,6,3,3,1,5,5,9
	.half	.L342-.L34
	.byte	3,127,1,5,6,3,1,1,5,1,9
	.half	.L343-.L342
	.byte	3,2,1,9
	.half	.L57-.L343
	.byte	0,1,1
.L339:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_ranges'
.L56:
	.word	-1,.L34,0,.L57-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_info'
.L58:
	.word	1300
	.half	3
	.word	.L59
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L61,.L60
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_initChannel',0,1,65,9
	.word	.L90
	.byte	1,1,1
	.word	.L26,.L116,.L25
	.byte	4
	.byte	'channel',0,1,65,56
	.word	.L117,.L118
	.byte	4
	.byte	'config',0,1,65,99
	.word	.L119,.L120
	.byte	5
	.word	.L26,.L116
	.byte	6
	.word	.L121
	.byte	7
	.byte	'sentSFR',0,1,70,18
	.word	.L86,.L123
	.byte	7
	.byte	'sentCh',0,1,71,18
	.word	.L124,.L125
	.byte	8
	.word	.L126,.L127,.L128
	.byte	9
	.word	.L129,.L130
	.byte	9
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L127,.L128
	.byte	0,5
	.word	.L134,.L116
	.byte	7
	.byte	'tempWDT',0,1,78,21
	.word	.L135,.L136
	.byte	5
	.word	.L137,.L116
	.byte	7
	.byte	'tempRCR',0,1,83,21
	.word	.L138,.L139
	.byte	8
	.word	.L140,.L141,.L142
	.byte	9
	.word	.L143,.L144
	.byte	9
	.word	.L145,.L146
	.byte	10
	.word	.L147,.L141,.L142
	.byte	0,5
	.word	.L142,.L116
	.byte	7
	.byte	'tempVIEW',0,1,102,22
	.word	.L148,.L149
	.byte	5
	.word	.L150,.L116
	.byte	7
	.byte	'tempIOCR',0,1,114,22
	.word	.L151,.L152
	.byte	5
	.word	.L153,.L116
	.byte	7
	.byte	'tempINP',0,1,126,21
	.word	.L154,.L155
	.byte	5
	.word	.L156,.L3
	.byte	7
	.byte	'timeOut',0,1,149,1,16
	.word	.L88,.L157
	.byte	7
	.byte	'error',0,1,150,1,16
	.word	.L90,.L158
	.byte	5
	.word	.L159,.L3
	.byte	7
	.byte	'tempSCR',0,1,166,1,29
	.word	.L160,.L161
	.byte	0,0,5
	.word	.L3,.L116
	.byte	7
	.byte	'pinsConfig',0,1,182,1,30
	.word	.L162,.L163
	.byte	5
	.word	.L164,.L10
	.byte	7
	.byte	'sentIn',0,1,186,1,32
	.word	.L165,.L166
	.byte	8
	.word	.L167,.L168,.L169
	.byte	9
	.word	.L170,.L171
	.byte	9
	.word	.L172,.L173
	.byte	9
	.word	.L174,.L175
	.byte	11
	.word	.L176,.L177
	.byte	8
	.word	.L179,.L180,.L181
	.byte	9
	.word	.L182,.L183
	.byte	9
	.word	.L184,.L185
	.byte	9
	.word	.L186,.L187
	.byte	10
	.word	.L188,.L180,.L181
	.byte	0,8
	.word	.L189,.L190,.L11
	.byte	9
	.word	.L191,.L192
	.byte	9
	.word	.L193,.L194
	.byte	9
	.word	.L195,.L196
	.byte	10
	.word	.L197,.L190,.L11
	.byte	0,0,0,8
	.word	.L167,.L178,.L11
	.byte	9
	.word	.L170,.L171
	.byte	9
	.word	.L172,.L173
	.byte	9
	.word	.L174,.L175
	.byte	0,5
	.word	.L11,.L10
	.byte	7
	.byte	'spcOut',0,1,193,1,32
	.word	.L198,.L199
	.byte	8
	.word	.L200,.L201,.L202
	.byte	9
	.word	.L203,.L204
	.byte	9
	.word	.L205,.L206
	.byte	9
	.word	.L207,.L208
	.byte	11
	.word	.L209,.L210
	.byte	8
	.word	.L212,.L213,.L214
	.byte	9
	.word	.L215,.L216
	.byte	9
	.word	.L217,.L218
	.byte	9
	.word	.L219,.L220
	.byte	9
	.word	.L221,.L222
	.byte	10
	.word	.L223,.L213,.L214
	.byte	0,0,0,8
	.word	.L200,.L211,.L10
	.byte	9
	.word	.L203,.L204
	.byte	9
	.word	.L205,.L206
	.byte	9
	.word	.L207,.L208
	.byte	0,0,0,5
	.word	.L10,.L16
	.byte	7
	.byte	'tos',0,1,202,1,20
	.word	.L224,.L225
	.byte	5
	.word	.L15,.L16
	.byte	8
	.word	.L226,.L15,.L227
	.byte	9
	.word	.L228,.L229
	.byte	12
	.word	.L230,.L15,.L227
	.byte	7
	.byte	'tempINP',0,2,129,5,21
	.word	.L154,.L231
	.byte	0,0,8
	.word	.L232,.L227,.L233
	.byte	9
	.word	.L234,.L235
	.byte	9
	.word	.L236,.L237
	.byte	9
	.word	.L238,.L239
	.byte	12
	.word	.L240,.L227,.L233
	.byte	8
	.word	.L241,.L242,.L233
	.byte	9
	.word	.L243,.L244
	.byte	10
	.word	.L245,.L242,.L233
	.byte	0,0,0,8
	.word	.L246,.L233,.L16
	.byte	9
	.word	.L247,.L248
	.byte	10
	.word	.L249,.L233,.L16
	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	11,1,85,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0
	.byte	0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,12,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_line'
.L60:
	.word	.L345-.L344
.L344:
	.half	3
	.word	.L347-.L346
.L346:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0
	.byte	'IfxSent.h',0,1,0,0
	.byte	'IfxPort.h',0,2,0,0
	.byte	'IfxSrc.h',0,3,0,0,0
.L347:
	.byte	5,9,7,0,5,2
	.word	.L26
	.byte	3,192,0,1,5,29,9
	.half	.L275-.L26
	.byte	3,4,1,5,21,9
	.half	.L348-.L275
	.byte	1,5,34,9
	.half	.L122-.L348
	.byte	3,1,1,5,47,9
	.half	.L349-.L122
	.byte	3,1,1,5,42,9
	.half	.L350-.L349
	.byte	3,127,1,5,47,9
	.half	.L278-.L350
	.byte	3,1,1,5,40,9
	.half	.L351-.L278
	.byte	1,5,24,9
	.half	.L277-.L351
	.byte	3,1,1,5,32,9
	.half	.L352-.L277
	.byte	3,1,1,5,24,9
	.half	.L353-.L352
	.byte	1,5,43,9
	.half	.L354-.L353
	.byte	3,2,1,4,2,5,35,9
	.half	.L127-.L354
	.byte	3,132,4,1,4,1,5,73,9
	.half	.L128-.L127
	.byte	3,253,123,1,5,54,9
	.half	.L274-.L128
	.byte	1,5,73,9
	.half	.L355-.L274
	.byte	1,5,19,9
	.half	.L134-.L355
	.byte	3,3,1,5,27,3,1,1,5,19,9
	.half	.L279-.L134
	.byte	1,3,1,1,5,21,9
	.half	.L137-.L279
	.byte	3,3,1,5,45,9
	.half	.L280-.L137
	.byte	3,1,1,5,21,9
	.half	.L356-.L280
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L357-.L356
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L358-.L357
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L359-.L358
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L360-.L359
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L361-.L360
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L362-.L361
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L363-.L362
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L364-.L363
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L365-.L364
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L366-.L365
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L367-.L366
	.byte	1,5,45,3,1,1,5,21,9
	.half	.L368-.L367
	.byte	1,3,1,1,5,42,9
	.half	.L276-.L368
	.byte	3,2,1,4,2,5,35,9
	.half	.L141-.L276
	.byte	3,250,3,1,4,1,5,22,9
	.half	.L142-.L141
	.byte	3,137,124,1,5,45,9
	.half	.L284-.L142
	.byte	3,1,1,5,22,9
	.half	.L369-.L284
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L370-.L369
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L371-.L370
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L372-.L371
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L373-.L372
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L374-.L373
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L375-.L374
	.byte	1,5,45,3,1,1,5,22,9
	.half	.L376-.L375
	.byte	1,3,1,1,9
	.half	.L150-.L376
	.byte	3,3,1,5,50,9
	.half	.L286-.L150
	.byte	3,1,1,5,22,9
	.half	.L285-.L286
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L377-.L285
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L378-.L377
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L379-.L378
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L380-.L379
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L381-.L380
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L382-.L381
	.byte	1,5,50,3,1,1,5,22,9
	.half	.L383-.L382
	.byte	1,3,1,1,5,21,9
	.half	.L153-.L383
	.byte	3,3,1,5,50,9
	.half	.L288-.L153
	.byte	3,1,1,5,21,9
	.half	.L287-.L288
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L384-.L287
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L385-.L384
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L386-.L385
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L387-.L386
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L388-.L387
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L389-.L388
	.byte	1,5,50,3,1,1,5,21,9
	.half	.L390-.L389
	.byte	1,3,1,1,5,48,9
	.half	.L391-.L390
	.byte	3,2,1,5,21,9
	.half	.L289-.L391
	.byte	1,5,31,9
	.half	.L392-.L289
	.byte	3,2,1,5,5,9
	.half	.L393-.L392
	.byte	1,5,24,7,9
	.half	.L394-.L393
	.byte	3,3,1,5,29,9
	.half	.L395-.L394
	.byte	1,5,24,9
	.half	.L396-.L395
	.byte	3,1,1,5,29,9
	.half	.L397-.L396
	.byte	1,5,15,9
	.half	.L2-.L397
	.byte	3,3,1,5,5,9
	.half	.L398-.L2
	.byte	1,5,24,7,9
	.half	.L156-.L398
	.byte	3,2,1,9
	.half	.L290-.L156
	.byte	3,1,1,5,57,3,3,1,5,20,9
	.half	.L5-.L290
	.byte	3,3,1,5,30,9
	.half	.L4-.L5
	.byte	3,125,1,5,16,9
	.half	.L399-.L4
	.byte	1,5,53,7,9
	.half	.L400-.L399
	.byte	1,5,19,7,9
	.half	.L6-.L400
	.byte	3,8,1,5,9,9
	.half	.L401-.L6
	.byte	3,3,1,5,28,7,9
	.half	.L159-.L401
	.byte	3,3,1,5,53,3,1,1,5,28,9
	.half	.L291-.L159
	.byte	1,5,53,3,1,1,5,28,9
	.half	.L402-.L291
	.byte	1,5,53,3,1,1,5,28,9
	.half	.L403-.L402
	.byte	1,5,53,3,1,1,5,28,9
	.half	.L404-.L403
	.byte	1,3,1,1,5,40,9
	.half	.L405-.L404
	.byte	3,2,1,5,13,9
	.half	.L292-.L405
	.byte	1,5,32,7,9
	.half	.L406-.L292
	.byte	3,3,1,5,37,9
	.half	.L407-.L406
	.byte	1,5,76,9
	.half	.L3-.L407
	.byte	3,5,1,5,5,9
	.half	.L283-.L3
	.byte	3,2,1,5,51,7,9
	.half	.L164-.L283
	.byte	3,2,1,5,9,9
	.half	.L282-.L164
	.byte	3,2,1,4,2,5,20,7,9
	.half	.L168-.L282
	.byte	3,213,3,1,4,1,5,51,9
	.half	.L169-.L168
	.byte	3,173,124,1,5,71,9
	.half	.L408-.L169
	.byte	1,4,2,5,5,9
	.half	.L178-.L408
	.byte	3,211,3,1,5,62,7,9
	.half	.L180-.L178
	.byte	3,2,1,4,3,5,40,9
	.half	.L409-.L180
	.byte	3,12,1,4,2,5,44,9
	.half	.L181-.L409
	.byte	3,117,1,5,62,9
	.half	.L410-.L181
	.byte	1,5,73,9
	.half	.L411-.L410
	.byte	1,5,36,9
	.half	.L412-.L411
	.byte	3,1,1,5,52,9
	.half	.L413-.L412
	.byte	1,5,95,9
	.half	.L414-.L413
	.byte	1,5,14,9
	.half	.L190-.L414
	.byte	3,29,1,5,13,9
	.half	.L415-.L190
	.byte	1,5,31,9
	.half	.L293-.L415
	.byte	1,5,37,9
	.half	.L416-.L293
	.byte	1,4,1,5,51,9
	.half	.L11-.L416
	.byte	3,143,124,1,5,9,9
	.half	.L294-.L11
	.byte	3,2,1,4,2,5,20,7,9
	.half	.L201-.L294
	.byte	3,217,3,1,4,1,5,50,9
	.half	.L202-.L201
	.byte	3,169,124,1,5,71,9
	.half	.L417-.L202
	.byte	1,4,2,5,5,9
	.half	.L211-.L417
	.byte	3,215,3,1,5,92,7,9
	.half	.L213-.L211
	.byte	3,2,1,5,63,9
	.half	.L418-.L213
	.byte	1,4,3,5,61,9
	.half	.L419-.L418
	.byte	3,7,1,5,40,1,4,2,5,44,9
	.half	.L214-.L419
	.byte	3,122,1,5,62,9
	.half	.L420-.L214
	.byte	1,5,73,9
	.half	.L421-.L420
	.byte	1,4,1,5,31,9
	.half	.L10-.L421
	.byte	3,173,124,1,5,43,9
	.half	.L422-.L10
	.byte	3,126,1,5,13,9
	.half	.L295-.L422
	.byte	3,2,1,5,55,7,9
	.half	.L423-.L295
	.byte	1,5,70,7,9
	.half	.L15-.L423
	.byte	3,2,1,4,2,5,28,9
	.half	.L424-.L15
	.byte	3,180,3,1,5,32,9
	.half	.L425-.L424
	.byte	1,5,28,3,1,1,5,31,9
	.half	.L426-.L425
	.byte	3,127,1,5,46,9
	.half	.L427-.L426
	.byte	1,5,28,9
	.half	.L296-.L427
	.byte	3,1,1,5,43,9
	.half	.L428-.L296
	.byte	1,5,33,9
	.half	.L297-.L428
	.byte	1,4,1,5,52,9
	.half	.L227-.L297
	.byte	3,204,124,1,4,4,5,17,9
	.half	.L429-.L227
	.byte	3,194,0,1,5,11,9
	.half	.L430-.L429
	.byte	3,1,1,5,17,9
	.half	.L431-.L430
	.byte	1,5,11,9
	.half	.L242-.L431
	.byte	3,103,1,5,17,9
	.half	.L432-.L242
	.byte	1,5,11,9
	.half	.L233-.L432
	.byte	3,18,1,5,16,9
	.half	.L433-.L233
	.byte	1,4,1,5,12,9
	.half	.L16-.L433
	.byte	3,73,1,5,1,3,1,1,7,9
	.half	.L62-.L16
	.byte	0,1,1
.L345:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_ranges'
.L61:
	.word	-1,.L26,0,.L62-.L26,0,0
.L121:
	.word	-1,.L26,.L122-.L26,.L116-.L26,-1,.L28,0,.L82-.L28,0,0
.L177:
	.word	-1,.L26,.L168-.L26,.L169-.L26,.L178-.L26,.L11-.L26,0,0
.L210:
	.word	-1,.L26,.L201-.L26,.L202-.L26,.L211-.L26,.L10-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_info'
.L63:
	.word	264
	.half	3
	.word	.L64
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L66,.L65
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_initChannelConfig',0,1,216,1,6,1,1,1
	.word	.L30,.L250,.L29
	.byte	4
	.byte	'config',0,1,216,1,65
	.word	.L251,.L252
	.byte	4
	.byte	'driver',0,1,216,1,87
	.word	.L84,.L253
	.byte	5
	.word	.L30,.L250
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_abbrev'
.L64:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_line'
.L65:
	.word	.L435-.L434
.L434:
	.half	3
	.word	.L437-.L436
.L436:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0,0
.L437:
	.byte	5,61,7,0,5,2
	.word	.L30
	.byte	3,217,1,1,5,20,9
	.half	.L438-.L30
	.byte	3,62,1,9
	.half	.L299-.L438
	.byte	3,1,1,5,1,9
	.half	.L300-.L299
	.byte	3,1,1,7,9
	.half	.L67-.L300
	.byte	0,1,1
.L435:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_ranges'
.L66:
	.word	-1,.L30,0,.L67-.L30,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_info'
.L68:
	.word	320
	.half	3
	.word	.L69
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L71,.L70
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_readChannelSerialDataFrame',0,1,195,2,9
	.word	.L90
	.byte	1,1,1
	.word	.L36,.L254,.L35
	.byte	4
	.byte	'channel',0,1,195,2,71
	.word	.L117,.L255
	.byte	4
	.byte	'frame',0,1,195,2,100
	.word	.L256,.L257
	.byte	5
	.word	.L36,.L254
	.byte	6
	.byte	'sentSFR',0,1,199,2,23
	.word	.L86,.L258
	.byte	6
	.byte	'ChanIdx',0,1,200,2,23
	.word	.L259,.L260
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_line'
.L70:
	.word	.L440-.L439
.L439:
	.half	3
	.word	.L442-.L441
.L441:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0,0
.L442:
	.byte	5,40,7,0,5,2
	.word	.L36
	.byte	3,198,2,1,9
	.half	.L443-.L36
	.byte	3,1,1,5,12,9
	.half	.L310-.L443
	.byte	3,5,1,5,48,9
	.half	.L444-.L310
	.byte	3,122,1,5,39,9
	.half	.L312-.L444
	.byte	3,2,1,5,48,9
	.half	.L313-.L312
	.byte	1,5,25,9
	.half	.L311-.L313
	.byte	1,5,48,9
	.half	.L445-.L311
	.byte	3,1,1,5,25,9
	.half	.L446-.L445
	.byte	1,5,34,9
	.half	.L447-.L446
	.byte	3,1,1,5,50,9
	.half	.L448-.L447
	.byte	1,5,25,9
	.half	.L449-.L448
	.byte	1,5,1,9
	.half	.L450-.L449
	.byte	3,3,1,7,9
	.half	.L72-.L450
	.byte	0,1,1
.L440:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_ranges'
.L71:
	.word	-1,.L36,0,.L72-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_info'
.L73:
	.word	300
	.half	3
	.word	.L74
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L76,.L75
	.byte	2
	.word	.L39
	.byte	3
	.byte	'IfxSent_Sent_readChannelSerialMessageFrame',0,1,209,2,9
	.word	.L90
	.byte	1,1,1
	.word	.L38,.L261,.L37
	.byte	4
	.byte	'channel',0,1,209,2,74
	.word	.L117,.L262
	.byte	4
	.byte	'message',0,1,209,2,116
	.word	.L263,.L264
	.byte	5
	.word	.L38,.L261
	.byte	6
	.byte	'sds',0,1,214,2,21
	.word	.L265,.L266
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_abbrev'
.L74:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_line'
.L75:
	.word	.L452-.L451
.L451:
	.half	3
	.word	.L454-.L453
.L453:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0,0
.L454:
	.byte	5,37,7,0,5,2
	.word	.L38
	.byte	3,212,2,1,5,12,9
	.half	.L455-.L38
	.byte	3,10,1,5,38,9
	.half	.L456-.L455
	.byte	3,121,1,5,25,9
	.half	.L314-.L456
	.byte	3,2,1,5,32,9
	.half	.L457-.L314
	.byte	3,1,1,5,25,1,5,51,9
	.half	.L458-.L457
	.byte	3,1,1,5,25,9
	.half	.L315-.L458
	.byte	1,5,32,9
	.half	.L459-.L315
	.byte	3,1,1,5,25,1,5,1,9
	.half	.L460-.L459
	.byte	3,3,1,7,9
	.half	.L77-.L460
	.byte	0,1,1
.L452:
	.sdecl	'.debug_ranges',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_ranges'
.L76:
	.word	-1,.L38,0,.L77-.L38,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L78:
	.word	191
	.half	3
	.word	.L79
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\Debug\\',0,12,1
	.word	.L81,.L80
	.byte	2
	.word	.L39
	.byte	3
	.byte	'.cocofun_5',0,1,65,9,1
	.word	.L28,.L82,.L27
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L80:
	.word	.L462-.L461
.L461:
	.half	3
	.word	.L464-.L463
.L463:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MPU\\0_Src\\4_McHal\\Tricore\\Sent\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Sent\\Sent\\IfxSent_Sent.c',0,0,0,0
	.byte	'IfxSent.h',0,1,0,0,0
.L464:
	.byte	5,43,7,0,5,2
	.word	.L28
	.byte	3,202,0,1,4,2,5,14,9
	.half	.L281-.L28
	.byte	3,132,4,1,5,13,9
	.half	.L465-.L281
	.byte	1,5,30,9
	.half	.L466-.L465
	.byte	1,9
	.half	.L82-.L466
	.byte	0,1,1,5,42,0,5,2
	.word	.L28
	.byte	3,227,0,1,4,2,5,14,9
	.half	.L281-.L28
	.byte	3,250,3,1,5,13,9
	.half	.L465-.L281
	.byte	1,5,30,9
	.half	.L466-.L465
	.byte	1,9
	.half	.L467-.L466
	.byte	3,113,1,7,9
	.half	.L82-.L467
	.byte	0,1,1
.L462:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L81:
	.word	-1,.L28,0,.L82-.L28,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L82-.L28
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L83-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L85:
	.word	-1,.L24,0,.L267-.L24
	.half	1
	.byte	100
	.word	0,0
.L89:
	.word	-1,.L24,.L267-.L24,.L269-.L24
	.half	1
	.byte	82
	.word	.L270-.L24,.L83-.L24
	.half	1
	.byte	95
	.word	.L273-.L24,.L83-.L24
	.half	1
	.byte	84
	.word	0,0
.L87:
	.word	-1,.L24,.L268-.L24,.L83-.L24
	.half	1
	.byte	111
	.word	.L271-.L24,.L272-.L24
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L116-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L196:
	.word	0,0
.L118:
	.word	-1,.L26,.L28-.L26,.L82-.L26
	.half	1
	.byte	100
	.word	0,.L274-.L26
	.half	1
	.byte	100
	.word	0,0
.L132:
	.word	0,0
.L146:
	.word	0,0
.L229:
	.word	0,0
.L194:
	.word	0,0
.L120:
	.word	-1,.L26,.L28-.L26,.L82-.L26
	.half	1
	.byte	108
	.word	.L28-.L26,.L82-.L26
	.half	1
	.byte	101
	.word	.L275-.L26,.L276-.L26
	.half	1
	.byte	108
	.word	0,.L134-.L26
	.half	1
	.byte	101
	.word	.L141-.L26,.L116-.L26
	.half	1
	.byte	108
	.word	0,0
.L158:
	.word	-1,.L26,.L5-.L26,.L291-.L26
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L222:
	.word	0,0
.L173:
	.word	0,0
.L187:
	.word	0,0
.L220:
	.word	0,0
.L175:
	.word	0,0
.L208:
	.word	0,0
.L185:
	.word	0,0
.L218:
	.word	0,0
.L163:
	.word	-1,.L26,.L283-.L26,.L116-.L26
	.half	1
	.byte	109
	.word	0,0
.L183:
	.word	0,0
.L216:
	.word	0,0
.L239:
	.word	0,0
.L130:
	.word	0,0
.L144:
	.word	0,0
.L192:
	.word	0,0
.L125:
	.word	-1,.L26,.L28-.L26,.L82-.L26
	.half	1
	.byte	111
	.word	.L277-.L26,.L276-.L26
	.half	1
	.byte	111
	.word	.L141-.L26,.L282-.L26
	.half	1
	.byte	111
	.word	0,0
.L166:
	.word	-1,.L26,.L282-.L26,.L293-.L26
	.half	1
	.byte	111
	.word	0,0
.L171:
	.word	0,0
.L123:
	.word	-1,.L26,.L28-.L26,.L82-.L26
	.half	1
	.byte	109
	.word	.L278-.L26,.L276-.L26
	.half	1
	.byte	109
	.word	.L274-.L26,.L134-.L26
	.half	1
	.byte	100
	.word	.L141-.L26,.L283-.L26
	.half	1
	.byte	109
	.word	0,0
.L199:
	.word	-1,.L26,.L294-.L26,.L10-.L26
	.half	1
	.byte	111
	.word	0,0
.L204:
	.word	0,0
.L206:
	.word	0,0
.L244:
	.word	0,0
.L248:
	.word	0,0
.L235:
	.word	0,0
.L155:
	.word	-1,.L26,.L288-.L26,.L289-.L26
	.half	1
	.byte	95
	.word	0,0
.L231:
	.word	-1,.L26,.L296-.L26,.L297-.L26
	.half	1
	.byte	95
	.word	0,0
.L152:
	.word	-1,.L26,.L286-.L26,.L287-.L26
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L139:
	.word	-1,.L26,.L280-.L26,.L276-.L26
	.half	1
	.byte	95
	.word	.L28-.L26,.L281-.L26
	.half	1
	.byte	95
	.word	0,0
.L161:
	.word	-1,.L26,.L291-.L26,.L292-.L26
	.half	1
	.byte	95
	.word	0,0
.L149:
	.word	-1,.L26,.L284-.L26,.L285-.L26
	.half	1
	.byte	95
	.word	0,0
.L136:
	.word	-1,.L26,.L279-.L26,.L280-.L26
	.half	1
	.byte	95
	.word	0,0
.L157:
	.word	-1,.L26,.L290-.L26,.L291-.L26
	.half	1
	.byte	95
	.word	0,0
.L225:
	.word	-1,.L26,.L295-.L26,.L116-.L26
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L237:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L30,0,.L250-.L30
	.half	2
	.byte	138,0
	.word	0,0
.L252:
	.word	-1,.L30,0,.L18-.L30
	.half	1
	.byte	100
	.word	.L298-.L30,.L250-.L30
	.half	1
	.byte	98
	.word	.L299-.L30,.L300-.L30
	.half	1
	.byte	100
	.word	0,0
.L253:
	.word	-1,.L30,0,.L250-.L30
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L91-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L94:
	.word	-1,.L32,0,.L301-.L32
	.half	1
	.byte	101
	.word	.L302-.L32,.L91-.L32
	.half	1
	.byte	108
	.word	0,0
.L92:
	.word	-1,.L32,0,.L301-.L32
	.half	1
	.byte	100
	.word	0,0
.L97:
	.word	-1,.L32,.L301-.L32,.L304-.L32
	.half	1
	.byte	82
	.word	.L305-.L32,.L91-.L32
	.half	1
	.byte	88
	.word	0,0
.L103:
	.word	-1,.L32,.L304-.L32,.L306-.L32
	.half	1
	.byte	82
	.word	.L307-.L32,.L19-.L32
	.half	1
	.byte	95
	.word	0,0
.L101:
	.word	0,0
.L108:
	.word	0,0
.L95:
	.word	-1,.L32,.L303-.L32,.L91-.L32
	.half	1
	.byte	111
	.word	.L308-.L32,.L309-.L32
	.half	1
	.byte	100
	.word	0,0
.L110:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L112-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L114:
	.word	-1,.L34,0,.L112-.L34
	.half	1
	.byte	100
	.word	0,0
.L115:
	.word	-1,.L34,0,.L112-.L34
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_loc'
.L260:
	.word	-1,.L36,.L310-.L36,.L311-.L36
	.half	1
	.byte	95
	.word	0,0
.L35:
	.word	-1,.L36,0,.L254-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L255:
	.word	-1,.L36,0,.L254-.L36
	.half	1
	.byte	100
	.word	0,0
.L257:
	.word	-1,.L36,0,.L254-.L36
	.half	1
	.byte	101
	.word	0,0
.L258:
	.word	-1,.L36,.L312-.L36,.L313-.L36
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L261-.L38
	.half	2
	.byte	138,0
	.word	0,0
.L262:
	.word	-1,.L38,0,.L261-.L38
	.half	1
	.byte	100
	.word	0,0
.L264:
	.word	-1,.L38,0,.L261-.L38
	.half	1
	.byte	101
	.word	0,0
.L266:
	.word	-1,.L38,.L314-.L38,.L315-.L38
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L468:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_deInitModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L468,.L24,.L83-.L24
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_initChannel')
	.sect	'.debug_frame'
	.word	12
	.word	.L468,.L26,.L116-.L26
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_initChannelConfig')
	.sect	'.debug_frame'
	.word	16
	.word	.L468,.L30,.L250-.L30
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_initModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L468,.L32,.L91-.L32
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L468,.L34,.L112-.L34
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_readChannelSerialDataFrame')
	.sect	'.debug_frame'
	.word	20
	.word	.L468,.L36,.L254-.L36
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxSent_Sent_readChannelSerialMessageFrame')
	.sect	'.debug_frame'
	.word	20
	.word	.L468,.L38,.L261-.L38
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L469:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L469,.L28,.L82-.L28
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
